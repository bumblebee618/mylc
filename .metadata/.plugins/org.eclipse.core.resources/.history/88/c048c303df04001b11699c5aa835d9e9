import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class ParkingLevel {
	private String levelId;
	private int availableSpotNum;
	
	private Map<Integer, Queue<String>> availableSpotsMap;
	private Set<String> unavailableSlots;
	private Map<String, ParkingSlot> allSlots;
	private List<Integer> slotSizes;
	
	public ParkingLevel(String levelId, List<Integer> slotSizes, List<Integer> capacities)
	{
		if (slotSizes.size() != capacities.size())
		{
			return;
		}
		
		this.levelId = levelId;
		availableSpotsMap = new HashMap<>();
		unavailableSlots = new HashSet<>();
		allSlots = new HashMap<>();
		slotSizes = new ArrayList<>();
		
		for (int i = 0; i < capacities.size(); i++)
		{
			String slotId = Utils.generateGuid();
			int spotSize = slotSizes.get(i);
			int count = capacities.get(i);
			
			for (int j = 0; j < count; j++)
			{
				ParkingSlot slot = new ParkingSlot(slotId, spotSize, levelId);
				availableSpotsMap.computeIfAbsent(spotSize, x -> new LinkedList<String>()).add(slotId);
				allSlots.put(slotId, slot);
			}
			
			availableSpotNum += count;
		}
	}
	
	public ParkingSlot parkVehicle(Vehicle vehicle)
	{
		for (int slotSize : slotSizes)
		{
			if (slotSize < vehicle.getSize())
			{
				continue;
			}
		
			if (availableSpotsMap.get(slotSize).size() > 0)
			{
				ParkingSlot slot = allSlots.get(availableSpotsMap.get(slotSize).poll());
				unavailableSlots.add(slot.getSlotId());
				slot.Park(vehicle);
				availableSpotNum--;
				return slot;
			}
		}
		
		return null;
	}
	
	
	public boolean unparkVehicle(ParkingSlot spot)
	{
		return spot.RemoveVehicle();
	}
}
