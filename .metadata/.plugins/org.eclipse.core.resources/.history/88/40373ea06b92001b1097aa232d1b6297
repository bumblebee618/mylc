import java.util.PriorityQueue;
import java.util.Queue;

public class Q936_Stamping_The_Sequence 
{
	private String stamp;
	private String target;
	private char[] letters;
	
	public int[] movesToStamp(String stamp, String target) 
    {
        if (stamp == null || stamp.length() == 0 || target == null || target.length() == 0 || stamp.length() > target.length())
        {
            return new int[0];
        }
        else if (stamp.length() == target.length())
        {
        	return stamp.equals(target) ? new int[] {0} : new int[0];
        }
        
        this.stamp = stamp;
        this.target = target;
        letters = target.toCharArray();
        
        int[] head = new int[target.length()], tail = new int[target.length()];
        Queue<Integer> startHeap = new PriorityQueue<>((a, b) -> head[b] - head[a]);
        Queue<Integer> endHeap = new PriorityQueue<>((a, b) -> tail[b] - tail[a]);
        
        for (int i = 0; i <= target.length() - stamp.length(); i++)
        {
            head[i] = findStartLen(i);
            
            if (head[i] > 0)
            {
                startHeap.offer(i);
            }
        }
        
        for (int i = target.length()-1; i >= stamp.length(); i--)
        {
            tail[i] = findEndLen(i);
            
            if (tail[i] > 0)
            {
                endHeap.offer(i);
            }
        }
        
        if ()
        {
        	
        }
    }
	
	private int findStartLen(int start)
    {
        int count = 0;
        
        for (int i = 0; i < stamp.length() && start+i < target.length(); i++)
        {
            if (stamp.charAt(i) != target.charAt(start+i))
            {
                break;
            }
            
            count++;
        }
        
        return count;
    }
	
	private int findEndLen(int start)
    {
        int count = 0;
        
        for (int i = stamp.length()-1; i >= 0 && start-i >= 0; i--)
        {
            if (stamp.charAt(i) != target.charAt(start-i))
            {
                break;
            }
            
            count++;
        }
        
        return count;
    }
}
