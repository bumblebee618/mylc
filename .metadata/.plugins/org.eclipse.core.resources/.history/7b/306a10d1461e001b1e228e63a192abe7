import java.util.*;

/***
 * 
 * @author jackie
 * 
 * Given an undirected tree, return its diameter: the number of edges in a longest path in that tree.

The tree is given as an array of edges where edges[i] = [u, v] is a bidirectional edge between nodes u and v.  Each node has labels in the set {0, 1, ..., edges.length}.

 

Example 1:



Input: edges = [[0,1],[0,2]]
Output: 2
Explanation: 
A longest path of the tree is the path 1 - 0 - 2.
Example 2:



Input: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
Output: 4
Explanation: 
A longest path of the tree is the path 3 - 2 - 1 - 4 - 5.
 

Constraints:

0 <= edges.length < 10^4
edges[i][0] != edges[i][1]
0 <= edges[i][j] <= edges.length
The given edges form an undirected tree.
 */
public class Q1245_Tree_Diameter 
{	
private int result = 0;
    
    public int treeDiameter(int[][] edges) 
    {
        if (edges == null || edges.length == 0 || edges.length != 2)
        {
            return 0;
        }
        
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        
        for (int[] edge : edges)
        {
            graph.computeIfAbsent(edge[0], x -> new HashSet<>()).add(edge[1]);
            graph.computeIfAbsent(edge[1], x -> new HashSet<>()).add(edge[0]);
        }
        
        List<Integer> list = new LinkedList<>();
        
        for (int key : graph.keySet())
        {
            if (graph.get(key).size() == 1)
            {
                list.add(key);
            }
        }
        
        for (int node : list)
        {
            dfs(node, graph, new HashSet<Integer>(), 0);
        }
        
        return result;
    }
    
    private void dfs(int node, Map<Integer, Set<Integer>> graph, Set<Integer> visited, int depth)
    {
    	System.out.println(depth);
        result = Math.max(result, depth);
        visited.add(node);
        
        for (int next : graph.get(node))
        {
            if (!visited.contains(next))
            {
                dfs(next, graph, visited, depth+1);
            }
        }
    }
	
	
	public static void main(String[] args)
	{
		Q1245_Tree_Diameter test = new Q1245_Tree_Diameter();
		int[][] edge = {{0,1},{1,2},{2,3},{1,4},{4,5}};
		System.out.println(test.treeDiameter(edge));
	}
}
