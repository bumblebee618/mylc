import java.util.*;

public class Q000_A_Contest 
{
	public int minElements(int[] nums, int limit, int goal) 
    {
        if (nums == null || nums.length == 0)
        {
            return 0;
        }
        
        long sum = Arrays.stream(nums).sum();
        long diff = Math.abs(sum - goal);
        long step = (diff-1) / limit + 1;
        return (int) step;
    }
	
	
	
	private Map<Integer, Integer>[] graph;
    private long[] dist;
    private int mod = 1_000_000_007;
    private Long[] memo;
    
    public int countRestrictedPaths(int n, int[][] edges) 
    {
        if (edges == null || edges.length == 0 || edges[0].length != 3 || n <= 0)
        {
            return 0;
        }
        
        graph = new Map[n+1];
        
        for (int i = 0; i < graph.length; i++)
        {
            graph[i] = new HashMap<>();
        }
        
        for (int[] edge : edges)
        {
            graph[edge[0]].put(edge[1], edge[2]);
            graph[edge[1]].put(edge[0], edge[2]);
        }
        
        dist = new long[n+1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[n] = 0;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(n);
        
        // bfs
        while (!queue.isEmpty())
        {
            int size = queue.size();
            
            for (int i = 0; i < size; i++)
            {
                int node = queue.poll();
                
                for (Map.Entry<Integer, Integer> entry : graph[node].entrySet())
                {
                	int next = entry.getKey();
                	int weight = entry.getValue();
                	
                    if (dist[next] > dist[node] + weight)
                    {
                        dist[next] = dist[node] + weight;
                        queue.offer(next);
                    }
                }
            }
        }
        
        memo = new Long[n+1];
        memo[n] = 1L;
        return (int) search(1, n);
    }
    
    private long search(int start, int end)
    {
    	if (start == end)
    	{
    		return 1;
    	}
    	else if (memo[start] != null)
    	{
    		return memo[start];
    	}
    	
    	long count = 0;
    	
    	for (int next : graph[start].keySet())
    	{
    		if (dist[start] > dist[next])
    		{
    			count = (count + search(next, end)) % mod;
    		}
    	}
    	
    	memo[start] = count;
    	return memo[start];
    }
    
    
    
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	int n1 = 5;
    	int[][] edges1 = {{1,2,3},{1,3,3},{2,3,1},{1,4,2},{5,2,2},{3,5,1},{5,4,10}};
    	
    	int n2 = 7;
    	int[][] edges2 = {{1,3,1},{4,1,2},{7,3,4},{2,5,3},{5,6,1},{6,7,2},{7,5,3},{2,6,4}};
    	
    	int n3 = 9;
    	int[][] edges3 = {{6,2,35129},{3,4,99499},{2,7,43547},{8,1,78671},{2,1,66308},{9,6,33462},{5,1,48249},{2,3,44414},{6,7,44602},{1,7,14931},{8,9,38171},{4,5,30827},{3,9,79166},{4,8,93731},{5,9,64068},{7,5,17741},{6,3,76017},{9,4,72244}};
    	
    	 System.out.println(test.countRestrictedPaths(n1, edges1));
    	 System.out.println(test.countRestrictedPaths(n2, edges2));
    	 System.out.println(test.countRestrictedPaths(n3, edges3));
    	
    	/***
    	int[] nums1 = {1,-1,1};
    	int limit1 = 3;
    	int goal1 = -4;
    	
    	int[] nums2 = {1,-10,9,1};
    	int limit2 = 100;
    	int goal2 = 0;
    	
    	int[] nums3 = {3,6,4,2,5,5};
    	int limit3 = 6;
    	int goal3 = 881574077;
    	
    	int[] nums4 = {1000000,1000000,1000000,1000000,1000000,1000000,1000000};
    	int limit4 = 1000000;
    	int goal4 = 1000000_000;
    	
    	System.out.println(test.minElements(nums1, limit1, goal1));
    	System.out.println(test.minElements(nums2, limit2, goal2));
    	System.out.println(test.minElements(nums3, limit3, goal3));
    	System.out.println(test.minElements(nums4, limit4, goal4));
    	***/
    }
    
}
