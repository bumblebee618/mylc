import java.util.*;

/***
 * 
 * @author jackie
 * 
 * Implement FreqStack, a class which simulates the operation of a stack-like data structure.

FreqStack has two functions:

push(int x), which pushes an integer x onto the stack.
pop(), which removes and returns the most frequent element in the stack.
If there is a tie for most frequent element, the element closest to the top of the stack is removed and returned.
 

Example 1:

Input: 
["FreqStack","push","push","push","push","push","push","pop","pop","pop","pop"],
[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]
Output: [null,null,null,null,null,null,null,5,7,5,4]
Explanation:
After making six .push operations, the stack is [5,7,5,7,4,5] from bottom to top.  Then:

pop() -> returns 5, as 5 is the most frequent.
The stack becomes [5,7,5,7,4].

pop() -> returns 7, as 5 and 7 is the most frequent, but 7 is closest to the top.
The stack becomes [5,7,5,4].

pop() -> returns 5.
The stack becomes [5,7,4].

pop() -> returns 4.
The stack becomes [5,7].
 

Note:

Calls to FreqStack.push(int x) will be such that 0 <= x <= 10^9.
It is guaranteed that FreqStack.pop() won't be called if the stack has zero elements.
The total number of FreqStack.push calls will not exceed 10000 in a single test case.
The total number of FreqStack.pop calls will not exceed 10000 in a single test case.
The total number of FreqStack.push and FreqStack.pop calls will not exceed 150000 across all test cases.
 */
public class Q895_Maximum_Frequency_Stack 
{
	private Map<Integer, Node> map;
    private Queue<Node> heap;
    private int globalTimeStamp = 0;

    public Q895_Maximum_Frequency_Stack() 
    {
        map = new HashMap<>();
        heap = new PriorityQueue<Node>((a, b) -> (a.freq != b.freq) ? b.freq - a.freq : b.timeStamps.get(b.timeStamps.size()-1) - a.timeStamps.get(a.timeStamps.size()-1));
    }
    
    public void push(int x) 
    {
        if (map.containsKey(x))
        {
            map.get(x).increaseFreq(globalTimeStamp++);
        }
        else
        {
            Node node = new Node(x, globalTimeStamp++);
            map.put(x, node);
            heap.offer(node);
        }
    }
    
    public int pop() 
    {
        if (heap.isEmpty())
        {
            return -1;
        }
        
        Node node = heap.poll();
        node.decreaseFreq();
        
        if (node.freq == 0)
        {
            map.remove(node.value);
        }
        else
        {
            heap.offer(node);
        }
        
        return node.value;
    }
    
    class Node
    {
        public int value;
        public int freq;
        public List<Integer> timeStamps;
        
        public Node(int value, int timeStamp)
        {
            this.value = value;
            freq = 1;
            timeStamps = new ArrayList<>();
            timeStamps.add(timeStamp);
        }
        
        public void increaseFreq(int timeStamp)
        {
            freq++;
            timeStamps.add(timeStamp);
        }
        
        public void decreaseFreq()
        {
            freq--;
            timeStamps.remove(timeStamps.size()-1);
        }
    }
}
