import java.util.*;





public class Q000_A_Contest 
{	  
	public boolean isCovered(int[][] ranges, int left, int right) 
	{
		if (ranges == null || ranges.length == 0 || ranges[0].length != 2 || left > right)
		{
			return false;
		}
		
		Arrays.sort(ranges, (a, b) -> (a[0] != b[0]) ? a[0]-b[0] : a[1]-b[1]);
		int start = ranges[0][0], end = ranges[0][1], size = ranges.length;
		List<int[]> list = new ArrayList<>();
		
		for (int i = 1; i < size; i++)
		{
			if (end+1 >= ranges[i][0])
			{
				end = Math.max(end, ranges[i][1]);
				continue;
			}
			
			if (start <= left && end >= right)
			{
				return true;
			}
			
			list.add(new int[] {start, end});
			start = ranges[i][0];
			end = ranges[i][1];
		}
		
		if (start <= left && end >= right)
		{
			return true;
		}
		
		return false;
    }
	
	
	
	public int chalkReplacer(int[] chalk, int k) 
	{
        if (chalk == null || chalk.length == 0 || k < 0)
        {
        	return -1;
        }
        
        long sum = 0;
        
        for (int num : chalk)
        {
        	sum += (long) num;
        }
        
        sum = (long) k % sum; 
        
        for (int i = 0; i < chalk.length; i++)
        {
        	if (sum < (long) chalk[i])
        	{
        		return i;
        	}
        	
        	sum -= (long) chalk[i];
        }
        
        return -1;
    }
	
	
	
									
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	int[] chalk1 = {5,1,5};
    	int k1 = 22;
    	
    	System.out.println(test.chalkReplacer(chalk1, k1));
    }
}
