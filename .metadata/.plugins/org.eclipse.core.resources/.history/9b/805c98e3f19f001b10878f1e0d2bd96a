import java.util.*;

import org.omg.CORBA.SystemException;




public class Q000_A_Contest 
{
	public boolean checkIfPangram(String sentence) 
    {
        if (sentence == null || sentence.length() < 26)
        {
            return false;
        }
        
        Set<Character> set = new HashSet<>();
        
        for (char c : sentence.toCharArray())
        {
            set.add(c);
            
            if (set.size() == 26)
            {
                break;
            }
        }
        
        return set.size() == 26;
    }
	
	
	public int maxIceCream(int[] costs, int coins) 
    {
		if (costs == null || costs.length == 0 || coins <= 0)
		{
			return 0;
		}
		
		int[] status = new int[10000];
		
		for (int cost : costs)
		{
			for (int i = coins; i >= cost; i--)
			{
				int curCount = dp.getOrDefault(i, Integer.MIN_VALUE);
				
				if (dp.getOrDefault(i-cost, Integer.MIN_VALUE) != Integer.MIN_VALUE)
				{
					curCount = Math.max(curCount, dp.get(i-cost)+1);
					dp.put(i, curCount);
				}
			}
		}
		
		return dp.getOrDefault(coins, Integer.MIN_VALUE) == Integer.MIN_VALUE ? 0 : dp.get(coins);
    }
	
	
	public int maxIceCream2(int[] costs, int coins) 
    {
		if (costs == null || costs.length == 0 || coins <= 0)
		{
			return 0;
		}
		
		Map<Integer, Integer> dp = new HashMap<>();
		dp.put(0, 0);
		int maxCost = -1;
		
		for (int cost : costs)
		{
			for (int i = coins; i >= cost; i--)
			{
				int curCount = dp.getOrDefault(i, Integer.MIN_VALUE);
				
				if (dp.getOrDefault(i-cost, Integer.MIN_VALUE) != Integer.MIN_VALUE)
				{
					curCount = Math.max(curCount, dp.get(i-cost)+1);
					dp.put(i, curCount);
					maxCost = Math.max(maxCost, i);
				}
			}
		}
		
		return maxCost == -1 ? 0 : dp.get(maxCost);
    }
	
    
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
 
    	int[] costs1 = {1,3,2,4,1};
    	int coins1 = 7;
    	
    	int[] costs2 = {10,6,8,7,7,8};
    	int coins2 = 5;
    	
    	int[] costs3 = {1,6,3,1,2,5};
    	int coins3 = 20;
    	
    	System.out.println(test.maxIceCream(costs1, coins1));
    	System.out.println(test.maxIceCream(costs2, coins2));
    	System.out.println(test.maxIceCream(costs3, coins3));
    	
    	
    }
}
