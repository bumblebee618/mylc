import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

public class Q_Word_Combination {
	private Trie root = new Trie();
	
	public List<String> findWordCombination(List<String> words) {
		List<String> result = new LinkedList<String>();
		
		if (words == null || words.size() <= 2) {
			return result;
		}
		
		Set<String> set = new HashSet<>();
		
		for (String word : words) {
			set.add(word);
			addWord(word);
		}
		
		for (String word : words) {
			Trie node = root;
			
			for (char c : word.toCharArray()) {
				if (node.children[c] == null) {
					break;
				} 
				
				node = node.children[c];
				
				if (wordNum ) {
					
				}
			}
		}
	}
	
	private void addWord(String word) {
		Trie node = root;
		
		for (char c : word.toCharArray()) {
			if (node.children[c] == null) {
				node.children[c] = new Trie();
			}
			
			node = node.children[c];
		}
		
		node.isWord = true;
	} 
	
	class Trie {
		public Trie[] children;
		public boolean isWord;
		
		public Trie() {
			children = new Trie[256];
			isWord = false;
		}
	}
}
