import java.util.*;

/***
 * 
 * @author jackie
 * In a 2D grid of 0s and 1s, we change at most one 0 to a 1.

After, what is the size of the largest island? (An island is a 4-directionally connected group of 1s).

Example 1:

Input: [[1, 0], [0, 1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
Example 2:

Input: [[1, 1], [1, 0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
Example 3:

Input: [[1, 1], [1, 1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
 

Notes:

1 <= grid.length = grid[0].length <= 50.
0 <= grid[i][j] <= 1.
 */
public class Q827_Making_A_Large_Island {
	private int[] dx = {1, -1, 0, 0};
    private int[] dy = {0, 0, 1, -1};
    private int maxArea = 0;
    
    public int largestIsland(int[][] grid) 
    {
        if (grid == null || grid.length == 0 || grid[0].length == 0)
        {
            return 0;
        }
        
        int row = grid.length;
        int col = grid[0].length;
        boolean[][] visited = new boolean[row][col];
        int[][] uf = new int[row][col];
        Map<Integer, List<int[]>> islands = new HashMap<>();
        
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < col; j++)
            {
                if (grid[i][j] == 1 && !visited[i][j])
                {
                    int rootId = i * col + j;
                    islands.put(rootId, new LinkedList<>());
                    dfs(islands, grid, visited, uf, i, j, rootId);
                }
            }
        }
        
        for (int key : islands.keySet())
        {
        	maxArea = Math.max(maxArea, islands.get(key).size());
        	
            for (int[] node : islands.get(key))
            {
                bfs(islands, grid, uf, node);
            }
        }
        
        return maxArea;
    }
    
    private void dfs(Map<Integer, List<int[]>> islands, int[][] grid, boolean[][] visited, int[][] uf, int x, int y, int rootId)
    {
        visited[x][y] = true;
        uf[x][y] = rootId;
        islands.get(rootId).add(new int[] {x, y});
        
        for (int i = 0; i < dx.length; i++)
        {
            int newX = x + dx[i];
            int newY = y + dy[i];
            
            if (newX >= 0 && newX < grid.length && newY >= 0 && newY < grid[0].length && grid[newX][newY] == 1 && !visited[newX][newY])
            {
                dfs(islands, grid, visited, uf, newX, newY, rootId);
            }
        }
    }
    
    private void bfs(Map<Integer, List<int[]>> islands, int[][] grid, int[][] uf, int[] node)
    {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(node);
        int level = 0;
        
        while (!queue.isEmpty())
        {
            int size = queue.size();
            level++;
            
            for (int i = 0; i < size; i++)
            {
                int[] curNode = queue.poll();
                
                for (int j = 0; j < dx.length; j++)
                {
                    int newX = curNode[0] + dx[j];
                    int newY = curNode[1] + dy[j];
                    int area1 = islands.get(uf[curNode[0]][curNode[1]]).size();
                    
                    if (level == 1)
                    {
                        if (newX >= 0 && newX < grid.length && newY >= 0 && newY < grid[0].length && grid[newX][newY] == 0)
                        {
                            queue.offer(new int[] {newX, newY});
                            maxArea = Math.max(maxArea, area1 + 1);
                        }
                    }
                    else
                    {
                        if (newX >= 0 && newX < grid.length && newY >= 0 && newY < grid[0].length && grid[newX][newY] == 1 && uf[newX][newY] != uf[curNode[0]][curNode[1]])
                        {
                            int area2 = islands.get(uf[newX][newY]).size();
                            maxArea = Math.max(maxArea, area1 + area2 + 1);
                        }
                    }
                }
            }
        }
    }
    
    
    
    
    public static void main(String[] args)
    {
    	Q827_Making_A_Large_Island test = new Q827_Making_A_Large_Island();
    	int[][] grid = {{1, 0}, {1, 1}};
    	System.out.println(test.largestIsland(grid));
    }
}
