import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.List;

/*****
 * 
Given two words (beginWord and endWord), and a dictionary's word list, 
find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the word list
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

 *
 * */

public class Q127_Word_Ladder {
	/*******************************************************************
	 * 此题可以理解为是一种状态图，从而进行bfs查找
	 *  
	 *******************************************************************/
	// test case: 
    // beginWord == null || endWord == null
    // beginWord == endWord
    // wordList is empty
	
	public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if (beginWord == null || endWord == null || wordList == null || wordList.size() == 0)
        {
            return 0;
        }
        else if (beginWord.equals(endWord))
        {
            return 0;
        }
        
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        Set<String> visited = new HashSet<>();
        visited.add(beginWord);
        int step = 1;
        
        Set<String> dict = new HashSet<>();
        
        for (String word : wordList)
        {
            dict.add(word);
        }
        
        while (!queue.isEmpty())
        {
            step++;
            int size = queue.size();
            
            for (int i = 0; i < size; i++)
            {
                String cur = queue.poll();
                
                for (String newWord : expends(cur, dict))
                {
                    if (visited.contains(newWord))
                    {
                        continue;
                    }
                    else if (newWord.equals(endWord))
                    {
                        return step;
                    }
                    else
                    {
                        visited.add(newWord);
                        queue.offer(newWord);
                    }
                }
            }
        }
        
        return 0;
    }
    
    private List<String> expends(String word, Set<String> dict)
    {
        List<String> list = new LinkedList<>();
        char[] letters = word.toCharArray();
            
        for (int i = 0; i < letters.length; i++)
        {
            char temp = letters[i];
                
            for (char c = 'a'; c <= 'z'; c++)
            {
                if (c == temp)
                {
                    continue;
                }
                    
                letters[i] = c;
                String newWord = new String(letters);
                    
                if (dict.contains(newWord))
                {
                    list.add(newWord);
                }
            }
                
            letters[i] = temp;
        }
            
        return list;
    }
}
