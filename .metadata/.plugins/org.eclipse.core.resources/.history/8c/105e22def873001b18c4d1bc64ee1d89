
public class Q000_Maximum_Score_from_Performing_Multiplication_Operations 
{
	public int maximumScore(int[] nums, int[] multipliers) 
    {
        if (nums == null || nums.length == 0 
            || multipliers == null || multipliers.length == 0
            || nums.length < multipliers.length)
        {
            return 0;
        }
        
        int n = nums.length, m = multipliers.length;
        int[][] score = new int[n][n];
        int diff = n-m;
        
        for (int length = diff+1; length <= n; length++)
        {
            for (int start = 0; start + length <= n; start++)
            {
                int end = start + length - 1;
                int multiplier = multipliers[m - (length-diff)];
                int rightPart = (start == end) ? 0 : score[start+1][end];
                int leftPart = (start == end) ? 0 : score[start][end-1];
                
                score[start][end] = Math.max(
                		multiplier * nums[start] + rightPart, 
                		multiplier * nums[end] + leftPart);
            }
        }
        
        return score[0][n-1];
    }
	
	
	
	public int longestPalindrome2(String word1, String word2) 
    {
        if (word1 == null || word1.length() == 0 || word2 == null || word2.length() == 0)
        {
            return 0;
        }
        
        int len1 = word1.length(), len2 = word2.length();
        String source = word1 + word2;

        int size = source.length();
        int[][] dp = new int[size][size];
        
        for (int i = 0; i < size; i++)
        {
            dp[i][i] = 1;
        }
        
        for (int i = 0; i < size-1; i++)
        {
            dp[i][i] = source.charAt(i) == source.charAt(i+1) ? 2 : 1;
        }
        
        int maxLen = dp[len1-1][len1] == 2 ? 2 : 0;
        
        for (int length = 3; length <= size; length++)
        {
            for (int start = 0; start + length <= size; start++)
            {
                int end = start + length - 1;
                
                if (source.charAt(start) == source.charAt(end))
                {
                    dp[start][end] = dp[start+1][end-1] + 2;
                    
                    if (start < len1 && end >= len1 && maxLen < dp[start][end])
                    {
                        maxLen = dp[start][end];
                    }
                }
                else
                {
                    dp[start][end] = Math.max(dp[start+1][end], dp[start][end-1]);
                }
            }
        }
        
        return dp[0][size-1];
    }
	
	
	
	public void printArray(int[][] arrays)
	{
		for (int[] array : arrays)
		{
			for (int num : array)
			{
				System.out.print(num + ", ");
			}
			
			System.out.println();
		}
	}
	
	
	public static void main(String[] args)
	{
		Q000_Maximum_Score_from_Performing_Multiplication_Operations test = new Q000_Maximum_Score_from_Performing_Multiplication_Operations();
		int[] nums1 = {1,2,3};
		int[] multipliers1 = {3,2,1};
		
		int[] nums2 = {-5,-3,-3,-2,7,1};
		int[] multipliers2 = {-10,-5,3,4,6};
		
		// System.out.println(test.maximumScore(nums1, multipliers1));
		// System.out.println(test.maximumScore(nums2, multipliers2));
		
		
		
		
		String word1_1 = "cacb";
		String word2_1 = "cbba";
		
		String word1_2 = "ab";
		String word2_2 = "ab";
		
		
		
		System.out.println(test.longestPalindrome2(word1_1, word2_1));
		System.out.println(test.longestPalindrome2(word1_2, word2_2));
	}
}
