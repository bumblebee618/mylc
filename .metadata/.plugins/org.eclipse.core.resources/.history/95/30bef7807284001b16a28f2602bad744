import java.util.*;

public class Q000_A_Contest 
{
	public boolean areAlmostEqual(String s1, String s2) 
    {
        if (s1 == null || s2 == null)
        {
            return s1 == null && s2 == null;
        }
        else if (s1.length() != s2.length())
        {
            return false;
        }
        else if (s1.equals(s2))
        {
            return true;
        }
        
        int index1 = -1, index2 = -1;
        int size = s1.length();
        
        for (int i = 0; i < size; i++)
        {
            if (s1.charAt(i) != s2.charAt(i))
            {
                if (index1 == -1)
                {
                    index1 = i;
                }
                else if (index2 == -1)
                {
                    index2 = i;
                }
                else
                {
                    return false;
                }
            }
        }
        
        System.out.println(index1 + "," + index2);
        
        return s1.charAt(index1) == s2.charAt(index2) && s1.charAt(index2) == s2.charAt(index1);
    }
	
	
	
	public double maxAverageRatio(int[][] classes, int extraStudents) 
    {
        if (classes == null || classes.length == 0 || classes[0].length != 2 || extraStudents < 0)
        {
            return 0;
        }
        
        Queue<int[]> heap = new PriorityQueue<>(new Comparator<int[]>(){
            @Override
            public int compare(int[] status1, int[] status2)
            {
                double newRatio1 = (double) (status1[0] + 1) / (status1[1] + 1);
                double oldRatio1 = (double) (status1[0]) / status1[1];
                double diff1 = newRatio1 - oldRatio1;
                
                double newRatio2 = (double) (status2[0] + 1) / (status2[1] + 1);
                double oldRatio2 = (double) (status2[0]) / status2[1];
                double diff2 = newRatio2 - oldRatio2;
                
                if (diff1 > diff2)
                {
                    return -1;
                }
                else
                {
                    return 1;
                }
            }
        });
        
        for (int[] c : classes)
        {
        	heap.offer(c);
        }
        
        for (int i = 0; i < extraStudents; i++)
        {
        	int[] status = heap.poll();
        	heap.offer(new int[] {status[0]+1, status[1]+1});
        }
        
        double result = 0;
        
        while (!heap.isEmpty())
        {
        	int[] status = heap.poll();
        	result += (double) status[0] / status[1];
        }
        
        return result / classes.length;
    }
    
    
    
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	
    	
    	
    	int[][] classes1 = {{1,2},{3,5},{2,2}};
    	int extraStudents1 = 2;
    	System.out.println(test.maxAverageRatio(classes1, extraStudents1));
    	
    }
    
}
