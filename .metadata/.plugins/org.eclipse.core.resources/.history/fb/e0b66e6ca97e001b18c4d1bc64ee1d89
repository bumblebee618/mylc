import java.util.*;

/***
 * 
 * @author jackie
 * 
 * Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.

An integer y is a power of three if there exists an integer x such that y == 3x.

 

Example 1:

Input: n = 12
Output: true
Explanation: 12 = 31 + 32
Example 2:

Input: n = 91
Output: true
Explanation: 91 = 30 + 32 + 34
Example 3:

Input: n = 21
Output: false
 

Constraints:

1 <= n <= 107
 */
public class Q1780_Check_if_Number_is_a_Sum_of_Powers_of_Three 
{
	private Map<String, Boolean> memo = new HashMap<>();
    private Map<Integer, Integer> powerMap = new HashMap<>();
    private int target = 0;
    
    public boolean checkPowersOfThree(int n) 
    {
        if (n < 1)
        {
            return false;
        }
        
        target = n;
        
        int maxPower = getMaxPower(n);
        char[] status = new char[maxPower+1];
        Arrays.fill(status, '0');
        
        return search(status, 0, 0);
    }
    
    private boolean search(char[] status, int startIndex, long curSum)
    {
        if (curSum == (long) target)
        {
            return true;
        }
        
        String key = new String(status);
        
        if (memo.containsKey(key))
        {
            return memo.get(key);
        }
        
        for (int i = startIndex; i < status.length; i++)
        {
        	if (curSum+powerMap.get(i) > target)
        	{
        		break;
        	}
        	
            if (status[i] == '0')
            {
                status[i] = '1';
                
                if (curSum+powerMap.get(i) > target)
                {
                	break;
                }
                
                if (search(status, i+1, curSum+powerMap.get(i)))
                {
                    memo.put(key, true);
                    break;
                }
                
                status[i] = '0';
            }
        }
        
        if (!memo.containsKey(key))
        {
            memo.put(key, false);
        }
        
        return memo.get(key);
    }
    
    private int getMaxPower(int n)
    {
        int count = 0;
        long y = 1;
        powerMap.put(0, (int) y);
        
        while (y <= (long) n)
        {
            y *= 3;
            count++;
            powerMap.put(count, (int) y);
        }
        
        return count-1;
    }
}
