import java.util.*;





public class Q000_A_Contest 
{	
	public String sortSentence(String s) 
    {
        if (s == null || s.length() == 0)
        {
            return s;
        }
        
        String[] strs = s.split(" ");
        Arrays.sort(strs, (a, b) -> a.charAt(a.length()-1) - b.charAt(b.length()-1));
        StringBuilder builder = new StringBuilder();
        
        for (String str : strs)
        {
        	builder.append(str.substring(0, str.length()-1)).append(" ");
        }
        
        return builder.substring(0, builder.length()-1);
    }
	
	
	public int[] memLeak(int memory1, int memory2) 
    {
		if (memory1 < 0 || memory2 < 0)
		{
			return new int[] {0, 0, 0};
		}
		else if (memory1 == 0 && memory2 == 0)
		{
			return new int[] {1, 0, 0};
		}
		
		
		/***
		int max = Math.max(memory1, memory2);
		int min = Math.min(memory1, memory2);
		int diff =  max - min;
		int seconds = binarySearch(diff, diff, 1);
		
		if (memory1 > memory2)
		{
			memory1 -= caculateMemory(1, seconds, 1);
		}
		else if (memory1 < memory2)
		{
			memory2 -= caculateMemory(1, seconds, 1);
		}
		***/
		
		int seconds = 0;
		int[] memories = new int[] {memory1, memory2};
		Queue<Integer> heap = new PriorityQueue<>((a, b) -> (memories[b] != memories[a] ? memories[b] - memories[a] : a - b));
		
		if (memory1 > 0)
		{
			heap.offer(0);
		}
		
		if (memory2 > 0)
		{
			heap.offer(1);
		}
		
		while (!heap.isEmpty())
		{
			int index = heap.poll();
			
			if (memories[index] < seconds)
			{
				break;
			}
			else
			{
				memories[index] -= seconds;
				heap.offer(index);
			}
			
			seconds++;
		}
		
		return new int[] {seconds, memories[0], memories[1]};
    }
	
	
  
    
    
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
 
    	// int memory1 = 8, memory2 = (1 << 31) - 1;
    	
    	// int memory1 = 8, memory2 = (1 << 31) - 1;
    	
    	int memory1 = 2, memory2 = 2;
    	
    	int[] result = test.memLeak(memory1, memory2);
    	
    	System.out.println(result[0] + ", " + result[1] + ", " + result[2]);
    	
    }
}
