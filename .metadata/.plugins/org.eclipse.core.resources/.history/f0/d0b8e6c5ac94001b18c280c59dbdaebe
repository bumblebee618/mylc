import java.util.*;



public class Q000_A_Contest 
{
	public boolean squareIsWhite(String coordinates) 
    {
        if (coordinates == null || coordinates.length() != 2)
        {
            return false;
        }
        
        int col = coordinates.charAt(0) - 'a';
        int row = coordinates.charAt(1) - '0';
        boolean result = (row % 2 == 1) ? false : true;
        result = (col % 2 == 1) ? !result : result;
        return result;
    }
    
	public boolean areSentencesSimilar(String sentence1, String sentence2) 
    {
        if (sentence1 == null || sentence2 == null)
        {
            return false;
        }
        else if (sentence1.equals(sentence2))
        {
            return true;
        }
        
        String[] words1 = sentence1.toLowerCase().split(" ");
		String[] words2 = sentence2.toLowerCase().split(" ");
        
        return words1.length >= words2.length 
        		? isSimilar(words1, words2)
        		: isSimilar(words2, words1);
    }
	
	private boolean isSimilar(String[] word1, String[] word2)
	{
		if (word1.length == word2.length)
		{
			return false;
		}
		
		int index1 = 0, index2 = 0;
		int size1 = word1.length, size2 = word2.length;
		int count = 0;
		
		while (index1 != size1 && index2 != size2)
		{
			if (word1[index1].equals(word2[index2]))
			{
				index1++;
				index2++;
				continue;
			}
			
			if (++count > 1)
			{
				return false;
			}
			
			while (index1 < size1 && !word1[index1].equals(word2[index2]))
			{
				index1++;
			}
		}
		
		count += index1 < size1 ? 1 : 0;
		return index2 == size2 && count == 1;
	}
	
	public int countNicePairs(int[] nums) 
	{
		if (nums == null || nums.length <= 1)
		{
			return 0;
		}
		
		int mod = 1_000_000_007;
		Map<Long, Long> map = new HashMap<>();
		
		for (int num : nums)
		{
			long diff = rev(num);
			map.put(diff, map.getOrDefault(diff, 0L)+1);
		}
		
		long result = 0;
		
		for (Map.Entry<Long, Long> entry : map.entrySet())
		{
			if (entry.getValue() > 1)
			{
				result = (result + entry.getValue() * (entry.getValue()-1) / 2) % mod;
			}
		}
		
		return (int) result;
    }
	
	private long rev(int num)
	{
		long originalNum = num, revNum = 0;
		
		while (num > 0)
		{
			revNum = revNum * 10 + num % 10;
			num /= 10;
		}
		
		return originalNum - revNum;
	}
	
	public int maxHappyGroups(int batchSize, int[] groups) 
    {
		if (batchSize <= 0 || groups == null || groups.length == 0)
		{
			return 0;
		}
		
		Map<Integer, Integer> map = new HashMap<>();
		int count = 0;
		
		for (int group : groups)
		{
			int key = group % batchSize;
			
			if (key > 0)
			{
				map.put(key, map.getOrDefault(key, 0)+1);
			}
			else
			{
				count++;
			}
			
			System.out.print(group % batchSize + ", ");
		}
		
		System.out.println("step1: count=" + count);
		
		List<Integer> candidates = new ArrayList<>();
		
		for (int num = 1; num <= batchSize/2; num++)
		{
			int count1 = map.getOrDefault(num, 0);
			int count2 = map.getOrDefault(batchSize-num, 0);
			
			if (count1 > 0 && count2 > 0)
			{
				if (num * 2 == batchSize)
				{
					count += count1 / 2;
					count1 %= 2;
					count2 = 0;
				}
				else 
				{
					int min = Math.min(count1, count2);
					count += min;
					count1 -= min;
					count2 -= min;
				}
			}
			
			for (int i = 0; i < count1; i++)
			{
				candidates.add(num);
			}
			
			for (int i = 0; i < count2; i++)
			{
				candidates.add(batchSize-num);
			}
		}
		
		System.out.println("step2: count=" + count);
		System.out.println("size = " + candidates.size());
		
		int left = 0, right = candidates.size()-1;
		int sum = 0;
		
		while (left <= right)
		{
			System.out.print(candidates.get(left) + ", " + candidates.get(right) + ", sum=");
			
			sum += left == right 
					? candidates.get(left++) + candidates.get(right--)
					: candidates.get(left++);
			
			System.out.println(sum);
			
			while (sum < batchSize && left < right)
			{
				sum += candidates.get(left++);
			}
			
			System.out.println(count + ", " + ((sum-1) / batchSize + 1));
			
			count += (sum % batchSize == 0) ? 1 : 0;
			sum %= batchSize;
		}
		
		count += sum > 0 ? 1 : 0;
		return count;
    }
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	int[] groups1 = {1,2,3,4,5,6};
    	int batchSize1 = 3;
    	
    	int[] groups2 = {1,3,2,5,2,2,1,6};
    	int batchSize2 = 4;
    	
    	int[] groups3 = {369821235,311690424,74641571,179819879,171396603,274036220};
    	int batchSize3 = 3;
    	
    	int[] groups4 = {844438225,657615828,355556135,491931377,644089602,30037905,863899906,246536524,682224520};
    	int batchSize4 = 3;
    	
    	int[] groups5 = {369205928,981877451,947462486,899465743,737778942,573732515,520226542,824581298,571789442,251943251,70139785,778962318,43379662,90924712,142825931,182207697,178834435,978165687};
    	int batchSize5 = 6;
    	
    	int[] groups6 = {287773481,815094798,356732984,644469322,543193620,903158817,274116865,395252956,363839119,365378492,122313059,312690039,252532812};
    	int batchSize6 = 7;
    	
    	/***
    	System.out.println("*" + test.maxHappyGroups(batchSize1, groups1));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize2, groups2));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize3, groups3));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize4, groups4));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize5, groups5));
    	***/
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize6, groups6));
    }
}
