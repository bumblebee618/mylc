import java.util.*;

/***
 * 
 * @author jackie
 * 
 * There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:



Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
 

Constraints:

1 <= n <= 10^5
n-1 <= connections.length <= 10^5
connections[i][0] != connections[i][1]
There are no repeated connections.
 */
public class Q1192_Critical_Connections_in_a_Network 
{
	private List<List<Integer>> result = new ArrayList<>(); // 返回结果
    private int[] deepArray;      // 深度数组
    private Set<Integer>[] graph; // 结构图
    
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) 
    {
        deepArray = new int[n];     // 初始化深度数组
        Arrays.fill(deepArray, -1); // 所有节点初始深度为-1
        graph = new Set[n];         // 初始化结构图map[i]代表节点i可以连通哪些节点
            
        for(int i=0;i<n;i++)
        {
            graph[i] = new HashSet<>();
        }
        
        for(List<Integer> connection : connections){
            graph[connection.get(0)].add(connection.get(1));
            graph[connection.get(1)].add(connection.get(0));
        }
        
        dfs(0, 0, 0);
        return result;
    }
    
    // current为当前节点
    // previous为前节点
    // deep为当前深度
    // 返回值为当前节点所有dfs路径终点的最小深度
    private int dfs(int current, int previous, int deep){
        deepArray[current] = deep; // 将当前深度存入深度数组
        int result = Integer.MAX_VALUE; // 返回值
    
        for(int i : graph[current])
        { 
            // 不能走回头路
            if(i == previous)
            { 
                continue;
            }
        
            int endDeep; // dfs终点深度
        
            // 深度为-1的点没走过，可以dfs
            if(deepArray[i] == -1)
            { 
                endDeep = dfs(i, current, deep+1);
                
                // 如果深度大于当前深度，说明当前点不在闭环上
                // 当前点与下一节点i之间的连线为答案之一
                if(endDeep > deep)
                {
                    List<Integer> list = new ArrayList<>();
                    list.add(current);
                    list.add(i);
                    result.add(list);
                }
            }
            else
            {
                // i节点深度不为-1，说明已经走过，i节点为dfs终点
                endDeep = deepArray[i];
            }
            
            // 更新最小深度
            result = Math.min(result, endDeep);
        }
    
        return result;
    }
}
