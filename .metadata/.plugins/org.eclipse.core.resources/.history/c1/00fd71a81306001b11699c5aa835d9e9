import java.util.PriorityQueue;
import java.util.Queue;

public class ElevatorManager implements Runnable
{
	private Queue<Integer> upRequestsQueue1;
	private Queue<Integer> pendingUpRequests;
	
	private Queue<Integer> downRequests;
	private Queue<Integer> pendingDownRequests;
	
	private Elevator elevator;
	private boolean isUp;
	
	public ElevatorManager()
	{
		upRequestsQueue1 = new PriorityQueue<Integer>(1, (a, b) -> a - b);
		pendingUpRequests = new PriorityQueue<Integer>(1, (a, b) -> a - b);
		
		downRequests = new PriorityQueue<Integer>(1, (a, b) -> b - a);
		pendingDownRequests = new PriorityQueue<Integer>(1, (a, b) -> b - a);
		
		elevator = ElevatorFactory.getElevator();
		isUp = true;
	}
	
	public void run() 
	{
		while (true) 
		{
			processRequest();
		}
	}
	
	public void pressButton(int fromFloor, int toFloor)
	{
		addRequest(new Request(fromFloor, toFloor));
	}
	
	private void processRequest()
	{
		if (!upRequestsQueue1.isEmpty())
		{
			isUp = true;
			
			while (!upRequestsQueue1.isEmpty())
			{
				int targetFloor = upRequestsQueue1.poll();
				elevator.moveToTargetFloor(targetFloor);
				processingTime(1000);
			}
		}
		
		if (!downRequests.isEmpty())
		{
			isUp = false;
			
			while (!downRequests.isEmpty())
			{
				int targetFloor = downRequests.poll();
				elevator.moveToTargetFloor(targetFloor);
				processingTime(1000);
			}
		}
	}
	
	private void addRequest(Request request)
	{
		if (request.isUp())
		{
			if (request.getFromFloor() > elevator.getCurrentFloor())
			{
				upRequestsQueue1.add(request.getFromFloor());
				upRequestsQueue1.add(request.getToFloor());
			}
			else
			{
				pendingUpRequests.add(request.getFromFloor());
				pendingUpRequests.add(request.getToFloor());
			}
		}
		else
		{
			if (request.getFromFloor() < elevator.getCurrentFloor())
			{
				downRequests.add(request.getFromFloor());
				downRequests.add(request.getToFloor());
			}
			else
			{
				pendingDownRequests.add(request.getFromFloor());
				pendingDownRequests.add(request.getToFloor());
			}
		}
	}
	
	private void processingTime(int time)
	{
		try 
		{
			Thread.sleep(time);
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
	}
}
