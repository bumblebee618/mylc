import java.util.*;
/**
 * 
 Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W.

If there is no such window in S that covers all characters in T, return the empty string "". If there are multiple such minimum-length windows, return the one with the left-most starting index.

Example 1:
Input: 
S = "abcdebdde", T = "bde"
Output: "bcde"
Explanation: 
"bcde" is the answer because it occurs before "bdde" which has the same length.
"deb" is not a smaller window because the elements of T in the window must occur in order.
Note:

All the strings in the input will only contain lowercase letters.
The length of S will be in the range [1, 20000].
The length of T will be in the range [1, 100].
 *
 */
public class Q727_Minimum_Window_Subsequence {
	// dp[i][j] 表示范围S中0～i个字符包含范围T中0～j个字符的子串的起始位置
    // -1 表示未匹配或无法匹配
    // dp[i][j] 中的j不能大于i，因为T的长度不能大于S的长度 -> 所以j大于i的 dp[i][j] = -1
    // 公式1： 当 S[i] == T[j] 的时候，dp[i][j] = dp[i - 1][j - 1] 
    // 公式2： 当 S[i] != T[j] 的时候，dp[i][j] = dp[i - 1][j] (S[i]肯定不可以用来做subsequence)
	
	// use dp, time complexity is O(m*n)
	public String minWindow(String S, String T) 
	{
        if (S == null || T == null || S.length() < T.length()) 
        {
            return "";
        }
        
        int sLen = S.length(), tLen = T.length();
        int[][] dp = new int[sLen][tLen];
        int minLen = Integer.MAX_VALUE;
        int startIndex = -1;
        
        for (int i = 0; i < sLen; i++) 
        {
            Arrays.fill(dp[i], -1);
            
            if (S.charAt(i) == T.charAt(0)) 
            {
                dp[i][0] = i;
            } else if (i > 0) 
            {
                dp[i][0] = dp[i-1][0];
            }
        }
        
        for (int i = 1; i < sLen; i++) 
        {
            for (int j = 1; j < tLen; j++) 
            {
                if (S.charAt(i) == T.charAt(j)) 
                {
                    dp[i][j] = dp[i-1][j-1];
                } 
                else 
                {
                    // example: aabcd vs abc
                    dp[i][j] = dp[i-1][j];
                }
            }
            
            if (dp[i][tLen-1] != -1 && minLen > i - dp[i][tLen-1] + 1) 
            {
                minLen = i - dp[i][tLen-1] + 1;
                startIndex = dp[i][tLen-1];
            }
        }
        
        return minLen == Integer.MAX_VALUE ? "" : S.substring(startIndex, startIndex + minLen);
    }
	
	
	
	// use dp, time complexity is O(m*n)
	public String minWindow2(String S, String T) {
        if (S == null || T == null || S.length() < T.length()) {
            return "";
        }
        
        int sLen = S.length(), tLen = T.length();
        int[][] dp = new int[sLen+1][tLen+1];
        int minLen = Integer.MAX_VALUE;
        int startIndex = -1;
        
        for (int i = 0; i <= sLen; i++) {
            dp[i][0] = i+1;
        }
        
        for (int i = 1; i <= sLen; i++) {
            for (int j = 1; j <= tLen; j++) {
                if (S.charAt(i-1) == T.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    dp[i][j] = dp[i-1][j];
                }
            }
            
            if (dp[i][tLen] != 0 && minLen > i - dp[i][tLen] + 1) {
                minLen = i - dp[i][tLen] + 1;
                startIndex = dp[i][tLen] - 1;
            }
        }
        
        return minLen == Integer.MAX_VALUE ? "" : S.substring(startIndex, startIndex + minLen);
    }
}
