/*****
 * 
Given a binary array, find the maximum number of consecutive 1s in this array.

Example 1:
Input: [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s.
    The maximum number of consecutive 1s is 3.
Note:

The input array will only contain 0 and 1.
The length of input array is a positive integer and will not exceed 10,000
 * 
 * */

public class Q485_Max_Consecutive_Ones {
	// test case: 
    //      nums = null, nums = []
    //      nums = [1], nums = [0]
    //      nums = [0,0], nums = [1,0]
    //      nums = [1,0,1,1,0,1]
    
    // using tow pointers, time is O(n)
	public int findMaxConsecutiveOnes(int[] nums) 
    {
        if (nums == null || nums.length == 0) 
        {
            return 0;
        }
        
        int len = nums.length;
        int maxLen = 0;
        int index = 0;
        
        while (index < len)
        {
            if (nums[index] == 0)
            {
                index++;
                continue;
            }
            
            int count = 0;
            
            while (index < len && nums[index] == 1)
            {
                index++;
                count++;
            }
            
            maxLen = Math.max(maxLen, count);
        }
        
        return maxLen;
    }
	
	
	
	
    
    
    // two pointers, time O(n)
    public int findMaxConsecutiveOnes2(int[] nums) {
        if (nums == null || nums.length == 0)
        {
            return 0;
        }
        
        int maxLen = 0;
        int size = nums.length;
        int front = 0;
        
        while (front < size)
        {
            if (nums[front] == 1)
            {
                int back = front;
                
                while (front < size && nums[front] == 1)
                {
                    front++;
                }
                
                maxLen = Math.max(maxLen, front-back);
            }
            
            front++;
        }
        
        return maxLen;
    }
}
