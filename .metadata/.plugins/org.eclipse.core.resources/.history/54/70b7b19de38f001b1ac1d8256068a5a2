/***
 * 
 * @author jackie
 * 
 * Given a non-empty string containing an out-of-order English representation of digits 0-9, output the digits in ascending order.

Note:
Input contains only lowercase English letters.
Input is guaranteed to be valid and can be transformed to its original digits. That means invalid inputs such as "abc" or "zerone" are not permitted.
Input length is less than 50,000.
Example 1:
Input: "owoztneoer"

Output: "012"
Example 2:
Input: "fviefuro"

Output: "45"
 *
 */
public class Q423_Reconstruct_Original_Digits_from_English 
{
	private String[] nums = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", };
	private String result = "";
	private int digitCount = 0;

	public String originalDigits(String s) 
	{
		if (s == null || s.length() == 0) 
		{
			return result;
		}

		char[] digits = new char[26];
		digitCount = s.length();

		for (char c : s.toCharArray()) 
		{
			digits[c - 'a']++;
		}

		search(digits, 0, "");
		return result;
	}

	private void search(char[] digits, int start, String solution) 
	{
		if (solution.length() == digitCount) 
		{
			result = solution;
			System.out.println("hit here");
			return;
		}

		for (int i = start; i < nums.length; i++) 
		{
			if (containNum(digits, nums[i])) 
			{
				update(digits, nums[i], false);
				search(digits, i, solution + Integer.toString(i));
				
				System.out.println("[" + Integer.toString(i) + "]");
				
				update(digits, nums[i], true);
			}
		}
	}

	private boolean containNum(char[] digits, String num) 
	{
		for (char c : num.toCharArray()) 
		{
			if (digits[c - 'a'] == 0) 
			{
				return false;
			}
		}

		return true;
	}

	private void update(char[] digits, String num, boolean isRollback) 
	{
		for (char c : num.toCharArray()) 
		{
			digits[c - 'a'] += isRollback ? 1 : -1;
		}
	}
	
	
	
	
	public static void main(String[] args)
	{
		Q423_Reconstruct_Original_Digits_from_English test = new Q423_Reconstruct_Original_Digits_from_English();
		String s = "owoztneoer";
		System.out.println("***" + test.originalDigits(s));
	}
}
