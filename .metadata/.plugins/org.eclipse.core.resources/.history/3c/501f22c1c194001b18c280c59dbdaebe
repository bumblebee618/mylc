import java.util.*;



public class Q000_A_Contest 
{
	/***
	private Map<String, Integer> memo;
	
	public int maxHappyGroups(int batchSize, int[] groups) 
	{
		if (batchSize <= 0 || groups == null || groups.length == 0)
		{
			return 0;
		}
		
		memo = new HashMap<>();
        int[] countMap = new int[batchSize];
        int result = 0, groupSize = 0;
        
        for (int i = 0; i < groups.length; i++)
        {
            int newGroup = groups[i] % batchSize;
            countMap[groups[i] % batchSize]++;
            groupSize += newGroup > 0 ? 1 : 0;
        }
        
        result += countMap[0];
        result += search(0, countMap, groupSize);
        return result;
    }
        
        
    private int search(int sumLeft, int[] countMap, int groupLeft)
    {
        if (groupLeft == 0) 
        {
        	return 0;
        }
        
        String key = Arrays.toString(countMap);
        
        if (memo.containsKey(key)) 
        {
        	return memo.get(key);
        }
        
        int result = 0;
        
        if (sumLeft == 0)
        {
            result++;
            sumLeft = countMap.length;
        }
        
        int count = 0;
        
        for (int num = 1; num < countMap.length; num++)
        {
            if (countMap[num] == 0) 
            {
            	continue;
            }
            
            countMap[num]--;
            int curGroupLeft = groupLeft - 1;
            int nextSumLeft = sumLeft - num;

            if (nextSumLeft < 0) 
            {
            	nextSumLeft += countMap.length;
            }
            
            count = Math.max(count, search(nextSumLeft, countMap, curGroupLeft));
            countMap[num]++;
        }
        
        result += count;
        memo.put(key, result);
        return result;
    }
    
    
    ***/
	
	
	
	
	public int maxHappyGroups(int n, int[] groups) {
        int arr[] = new int[n+1];
        int result = 0;
		// reduce group to groups of size  group%n
        for (int gSize : groups) {
            arr[gSize % n]++;
        }
        
        // Only need 1 step
        result += arr[0];
        arr[0] = 0;
        
        // Only need 2 step
        for (int i=1; i<n/2; i++) {
            int min = Math.min(arr[i], arr[n-i]);
            arr[i] -= min;
            arr[n-i] -= min;
            result += min;
        }
        result += dfs(arr, 0, new HashMap<>());
        return result;
    }
    
    private int dfs(int arr[], int remain, Map<String, Integer> cache) {
        int n = arr.length-1;
        String key = Arrays.toString(arr);
        if (cache.containsKey(key)) return cache.get(key);
        int result = 0;
        // greedy and short cut when we can finish the current round
        if (remain > 0 && arr[n-remain] > 0) {
            arr[n-remain]--;
            result = dfs(arr, 0, cache);
            arr[n-remain]++;
        } else {
            for (int i=1; i<arr.length; i++) {
                if (arr[i] > 0) {
                    arr[i]--;
                    result = Math.max(result, dfs(arr, (remain+i)%(n), cache) + (remain == 0 ? 1 : 0));
                    arr[i]++;
                }
            }
        }
        cache.put(key, result);
        return result;
    }
	
	
	
	
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	int[] groups1 = {1,2,3,4,5,6};
    	int batchSize1 = 3;
    	
    	int[] groups2 = {1,3,2,5,2,2,1,6};
    	int batchSize2 = 4;
    	
    	int[] groups3 = {369821235,311690424,74641571,179819879,171396603,274036220};
    	int batchSize3 = 3;
    	
    	int[] groups4 = {844438225,657615828,355556135,491931377,644089602,30037905,863899906,246536524,682224520};
    	int batchSize4 = 3;
    	
    	int[] groups5 = {369205928,981877451,947462486,899465743,737778942,573732515,520226542,824581298,571789442,251943251,70139785,778962318,43379662,90924712,142825931,182207697,178834435,978165687};
    	int batchSize5 = 6;
    	
    	int[] groups6 = {287773481,815094798,356732984,644469322,543193620,903158817,274116865,395252956,363839119,365378492,122313059,312690039,252532812};
    	int batchSize6 = 7;
    	
    	/***
    	System.out.println("*" + test.maxHappyGroups(batchSize1, groups1));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize2, groups2));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize3, groups3));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize4, groups4));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize5, groups5));
    	***/
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize6, groups6));
    }
}
