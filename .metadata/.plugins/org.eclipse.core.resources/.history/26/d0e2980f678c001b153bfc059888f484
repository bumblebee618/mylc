import java.util.*;


public class Q000_A_DemandingMoney 
{
	private static long maxMoney = Integer.MIN_VALUE;
	private static Map<Long, Long> solutions;
	
	private static Long[] result = { Long.MIN_VALUE, Long.MIN_VALUE };
	private static Set<Integer>[] graph;
	private static int[] moneys;
    
    static long[] demandingMoney(int[] inputMoneys, int[][] roads) 
    {
        if (inputMoneys == null || inputMoneys.length == 0)
        {
            return new long[] {0, 0};
        }
        
        int n = inputMoneys.length;
        moneys = inputMoneys;
        graph = new Set[n+1];
        solutions = new HashMap<>();
    
        for (int i = 1; i <= n; i++)
        {
            graph[i] = new HashSet<>();
        }
        
        for (int[] road : roads)
        {
            int max = road[0] > road[1] ? road[0] : road[1];
            int min = road[0] > road[1] ? road[1] : road[0];
            graph[min].add(max);
            
            graph[min].add(min);
            graph[max].add(max);
        }
        
        Set<Integer> visited = new HashSet<>();
        long singleMoney = 0;
        int zeroCount = 0;
        
        for (int i = 1; i <= n; i++)
        {
        	if (graph[i].size() == 0)
        	{
        		visited.add(i);
        		singleMoney += moneys[i-1];
        		zeroCount += moneys[i-1] == 0 ? 1 : 0;
        	}
        }
        
        // for corner case: skip all houses
        solutions.put(0L, 1L);
        
        for (int start = 1; start <= n; start++)
        {
        	if (!visited.contains(start))
        	{
        		search(start, visited, 0L);
        	}
        }
        
        // handle single node scenario
        if (result[0] != Long.MIN_VALUE)
        {
        	result[0] += singleMoney;
        	result[1] *= (1L << zeroCount);
        }
        else
        {
        	result[0] = singleMoney;
        	result[1] = (1L << zeroCount);
        }
        
        /***
        if (maxMoney != Integer.MIN_VALUE)
        {
        	count *= solutions.get(maxMoney);
        	result += maxMoney;
        }
        ***/
        
        return new long[] { result[0], result[1] };
    }
    
    private static void search(int start, Set<Integer> visited, long totalMoney)
    {
        totalMoney += moneys[start-1];
        // solutions.put(totalMoney, solutions.getOrDefault(totalMoney, 0L) + 1L);
        // maxMoney = Math.max(maxMoney, totalMoney);
        
        if (result[0] < totalMoney)
        {
        	result[0] = totalMoney;
        	result[1] = 1;
        }
        else if (result[0] == totalMoney)
        {
        	result[1]++;
        }
        
        Set<Integer> removed = new HashSet<>();
        for (int neighbor : graph[start])
        {
            if (!visited.contains(neighbor))
            {
                visited.add(neighbor);
                removed.add(neighbor);
            }
        }
        
        for (int next = start+1; next <= moneys.length; next++)
        {
            if (visited.contains(next))
            {
                continue;
            }
            
            search(next, visited, totalMoney);
        }
        
        visited.removeAll(removed);
    }
    
    
    
    
    
    
    
    
    
    
    
	public static void print(long[] result)
	{
		for (long num : result)
		{
			System.out.print(num + ", ");
		}
		
		System.out.println();
	}
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	int[] dollars1 = {100, 0, 100, 100, 100, 0, 100};
    	int[][] roads1 = { {3,5}, {2,4}, {5,6}, {4,6}, {1,4} };
    
    	
    	int[] dollars2 = {75,75,50,75,100};
    	int[][] roads2 = { {3,5}, {2,5}, {2,3}, {4,5}, {1,3}, {2,4} };

    	
    	int[] dollars3 = {6,8,2};
    	int[][] roads3 = { {1,2}, {3,2} };
    	
    	
    	int[] dollars4 = {
    			100, 100, 0, 0, 0, 0, 50, 100, 100, 100,
    			50, 50, 100, 100, 100, 100, 50, 100, 50, 0,
    			50, 0, 50, 50, 100, 100, 100, 50, 100
    			};
    	
    	int[][] roads4 = { 
    			{12,14}, {3,21}, {12,26}, {17,22}, {16,29}, 
    			{10,28}, {9, 15}, {27, 29}, {3, 17}, {3,14}, 
    			{11,12}, {17,19}, {4,5}, {3,26}
    			};
    	
    	
    	
    	int[] dollars5 = {0, 100};
    	int[][] roads5 = {};
    
    	
    	int[] dollars6 = {
    			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    	int[][] roads6 = {{2,5}};
    	
    	
    	
    	
    	long[] result1 = demandingMoney(dollars6, roads6);
    	print(result1);
    	
    	
    	
    	
    	/***
    	int[] result2 = demandingMoney(dollars2, roads2);
    	print(result2);
    	***/
    	/***
    	int[] result3 = demandingMoney(dollars3, roads3);
    	print(result3);
    	***/

    	/***
    	int[] result4 = demandingMoney(dollars4, roads4);
    	print(result4);
    	***/
    	
    	/***
    	int[] result5 = demandingMoney(dollars5, roads5);
    	print(result5);
    	***/
    	
    	//print(result2);
    	//print(result3);
    	
    	/***
    	5 6
75 75 50 75 100
3 5
2 5
2 3
4 5
1 3
2 4
    	***/
    	
    }
}
