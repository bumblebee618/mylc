import java.math.BigDecimal;
import java.util.*;






public class Q000_A_Contest 
{	  
	public int smallestChair(int[][] times, int targetFriend) {
		List<int[]> list = new ArrayList<>();
		
		for (int[] time : times)
		{
			if (time[0] < times[targetFriend][0])
			{
				list.add(time);
			}
		}
		
		Collections.sort(list, (a, b) -> a[0] - b[0]);
		Queue<int[]> heap = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
		Queue<Integer> chairs = new PriorityQueue<>();
		int chairId = 0;
		
		for (int i = 0; i < list.size(); i++)
		{
			int[] curTime = list.get(i);
			
			System.out.println("input: " + curTime[0] + ", " + curTime[1]);
			
			while (!heap.isEmpty() && heap.peek()[0] <= curTime[0])
			{
				int[] node = heap.poll();
				chairs.add(node[1]);
				
				System.out.println("leave: " + node[0] + ", chair " + node[1]);
			}
			
			if (chairs.isEmpty())
			{
				System.out.println("take from index: " + curTime[1] + ", chair " + chairId);
				heap.offer(new int[] {curTime[1], chairId++});
			}
			else
			{
				System.out.println("take from heap: " + curTime[1] + ", chair " + chairs.peek());
				heap.offer(new int[] {curTime[1], chairs.poll()});
			}
		}
		
		while (!heap.isEmpty() && heap.peek()[0] <= times[targetFriend][0])
		{
			chairs.add(heap.poll()[1]);
		}
		
		return chairs.isEmpty() ? chairId : chairs.peek();
    }
	
	
	public List<List<Long>> splitPainting(int[][] segments) {
		List<List<Long>> result = new ArrayList<>();
        
        Queue<Node> heap = new PriorityQueue<Node>((a, b) -> {
        	if (a.index != b.index)
            {
                return a.index - b.index;
            }
            else if (!a.isStart && b.isStart)
            {
                return -1;
            }
            else if (a.isStart && !b.isStart)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        });
        
        for (int[] segment : segments)
        {
        	heap.offer(new Node(segment[0], segment[2], true));
            heap.offer(new Node(segment[1], segment[2], false));
        }
        
        long color = 0;
        int prev = -1;
        
        while (!heap.isEmpty())
        {
        	Node node = heap.poll();
        	color += node.isStart ? node.color : -node.color;
        	
        	System.out.println(node.index + ", " + color);
        	
        	if (prev == -1 || node.index == prev)
        	{
        		prev = node.index;
        		continue;
        	}
        	
        	List<Long> list = new LinkedList<>();
        	list.add((long) prev);
        	list.add((long) node.index);
        	list.add(color);
        	result.add(list);
        	
        	prev = node.index;
        }
        
        return result;
    }
	
	class Node
	{
		public int index;
		public int color;
		public boolean isStart;
		
		public Node(int i, int c, boolean s)
		{
			index = i;
			color = c;
			isStart = s;
		}
	}
	
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	int[][] segments1 = {{1,4,5},{4,7,7},{1,7,9}};
    	
    	int[][] segments2 = {{1,7,9},{6,8,15},{8,10,7}};
    	
    	int[][] segments3 = {{3,10},{1,2},{2,6},{4,7}};
    	
    	
    	
    	/**
    	System.out.println(test.smallestChair(times1, targetFriend1));
    	System.out.println(test.smallestChair(times2, targetFriend2));
    	System.out.println(test.smallestChair(times3, targetFriend3));
    	**/
    	
    	List<List<Long>> list = test.splitPainting(segments1);
    	
    	for (List<Long> elem : list)
    	{
    		for (long num : elem)
    		{
    			System.out.print(num + ", ");
    		}
    		
    		System.out.println();
    	}
    }
}
