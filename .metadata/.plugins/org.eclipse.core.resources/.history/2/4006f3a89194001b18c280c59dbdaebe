import java.util.*;



public class Q000_A_Contest 
{
	public boolean squareIsWhite(String coordinates) 
    {
        if (coordinates == null || coordinates.length() != 2)
        {
            return false;
        }
        
        int col = coordinates.charAt(0) - 'a';
        int row = coordinates.charAt(1) - '0';
        boolean result = (row % 2 == 1) ? false : true;
        result = (col % 2 == 1) ? !result : result;
        return result;
    }
    
	public boolean areSentencesSimilar(String sentence1, String sentence2) 
    {
        if (sentence1 == null || sentence2 == null)
        {
            return false;
        }
        else if (sentence1.equals(sentence2))
        {
            return true;
        }
        
        String[] words1 = sentence1.toLowerCase().split(" ");
		String[] words2 = sentence2.toLowerCase().split(" ");
        
        return words1.length >= words2.length 
        		? isSimilar(words1, words2)
        		: isSimilar(words2, words1);
    }
	
	private boolean isSimilar(String[] word1, String[] word2)
	{
		if (word1.length == word2.length)
		{
			return false;
		}
		
		int index1 = 0, index2 = 0;
		int size1 = word1.length, size2 = word2.length;
		int count = 0;
		
		while (index1 != size1 && index2 != size2)
		{
			if (word1[index1].equals(word2[index2]))
			{
				index1++;
				index2++;
				continue;
			}
			
			if (++count > 1)
			{
				return false;
			}
			
			while (index1 < size1 && !word1[index1].equals(word2[index2]))
			{
				index1++;
			}
		}
		
		count += index1 < size1 ? 1 : 0;
		return index2 == size2 && count == 1;
	}
	
	public int countNicePairs(int[] nums) 
	{
		if (nums == null || nums.length <= 1)
		{
			return 0;
		}
		
		int mod = 1_000_000_007;
		Map<Integer, Integer> map = new HashMap<>();
		
		for (int num : nums)
		{
			Integer diff = rev(num);
			
			if (diff != null)
			{
				map.put(diff, map.getOrDefault(diff, 0)+1);
				
				// System.out.println(diff + ", " + map.get(diff));
			}
		}
		
		long result = 0;
		
		for (Map.Entry<Integer, Integer> entry : map.entrySet())
		{
			if (entry.getKey() > 1)
			{
				result = (result + entry.getValue() * (entry.getValue()-1)/2) % mod;
				
				System.out.println(entry.getValue() * (entry.getValue()-1)/2);
			}
		}
		
		return (int) result;
    }
	
	private Integer rev(int num)
	{
		int originalNum = num;
		long revNum = 0;
		
		while (num > 0)
		{
			revNum = revNum * 10 + num % 10;
			num /= 10;
		}
		
		// System.out.println(originalNum + ", " + revNum);
		
		return revNum > Integer.MAX_VALUE ? null : originalNum - (int) revNum;
	}
	
	
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	int[] nums1 = {42,11,1,97};
    	int[] nums2 = {13,10,35,24,76};
    	
    	System.out.println(test.countNicePairs(nums1));
    	// System.out.println(test.countNicePairs(nums2));
    	
    	
    }
}
