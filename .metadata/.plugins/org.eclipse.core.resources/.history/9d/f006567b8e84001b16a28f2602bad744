import java.util.*;

/***
 * 
 * @author jackie
 * 
 * You are given an array of integers nums (0-indexed) and an integer k.

The score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.

Return the maximum possible score of a good subarray.

 

Example 1:

Input: nums = [1,4,3,7,4,5], k = 3
Output: 15
Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. 
Example 2:

Input: nums = [5,5,4,5,4,1,1,1], k = 0
Output: 20
Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 2 * 104
0 <= k < nums.length
 */
public class Q1793_Maximum_Score_of_a_Good_Subarray 
{
	public int maximumScore(int[] nums, int k) 
	{
		if (nums == null || nums.length == 0 || k < 0 || k >= nums.length)
        {
            return 0;
        }
		
        int n = nums.length;
        int maxScore = 0;
        Stack<Integer> stack = new Stack<>();
        
        for (int i = 0; i <= n; i++)
        {
        	 int currentHeight = (i == n) ? -1 : nums[i];  
        	 
        	 while (!stack.isEmpty() && currentHeight <= nums[stack.peek()]) 
             {
                 int h = nums[stack.pop()];
                 int w = (stack.isEmpty()) ? i : i - stack.peek() - 1;  
                 
                 if (i > k && i - w  <= k) 
                 {
                	 maxScore = Math.max(maxScore, h * w);
                 }
             }
        	 
        	 stack.push(i);
        }
        
        return maxScore;
    }
    
    
    public int maximumScore2(int[] nums, int k) 
    {
        if (nums == null || nums.length == 0 || k < 0 || k >= nums.length)
        {
            return 0;
        }
        
        int maxScore = Integer.MIN_VALUE;
        Queue<Integer> heap = new PriorityQueue<>((a, b) -> (nums[a] - nums[b]));
        int left = 0, right = nums.length-1;
        
        for (int i = 0; i < nums.length; i++)
        {
        	heap.offer(i);
        }
        
        while (left <= k && right >= k)
        {
        	int curMinIndex = heap.poll();
        	maxScore = Math.max(maxScore, nums[curMinIndex] * (right-left+1));
        	
        	if (curMinIndex <= k)
        	{
        		left = Math.max(left, curMinIndex+1);
        	}
        	else
        	{
        		right = Math.min(right, curMinIndex-1);
        	}
        }
        
        return maxScore;
    }
}
