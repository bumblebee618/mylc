import java.util.*;



public class Q000_A_Contest 
{
	public int maxHappyGroups(int batchSize, int[] groups) 
    {
		if (batchSize <= 0 || groups == null || groups.length == 0)
		{
			return 0;
		}
		
		int[] map = new int[batchSize];
		int candidateSize = 0;
		for (int group : groups)
		{
			map[group % batchSize]++;
			candidateSize += (group % batchSize != 0) ? 1 : 0;
		}
		
		int count = map[0];
		
		for (int i = 2; i <= candidateSize; i++)
		{
			int[] dp = new int[batchSize*candidateSize];
			
			
		}
		
		
		
		
		
		
		
		
		
		System.out.println("step1: count=" + count);
		
		List<Integer> candidates = new ArrayList<>();
		
		for (int num = 1; num <= batchSize/2; num++)
		{
			int count1 = map.getOrDefault(num, 0);
			int count2 = map.getOrDefault(batchSize-num, 0);
			
			if (count1 > 0 && count2 > 0)
			{
				if (num * 2 == batchSize)
				{
					count += count1 / 2;
					count1 %= 2;
					count2 = 0;
				}
				else 
				{
					int min = Math.min(count1, count2);
					count += min;
					count1 -= min;
					count2 -= min;
				}
			}
			
			for (int i = 0; i < count1; i++)
			{
				candidates.add(num);
			}
			
			for (int i = 0; i < count2; i++)
			{
				candidates.add(batchSize-num);
			}
		}
		
		System.out.println("step2: count=" + count);
		System.out.println("size = " + candidates.size());
		
		int left = 0, right = candidates.size()-1;
		int sum = 0;
		
		while (left <= right)
		{
			System.out.print(candidates.get(left) + ", " + candidates.get(right) + ", sum=");
			
			sum += left == right 
					? candidates.get(left++) + candidates.get(right--)
					: candidates.get(left++);
			
			System.out.println(sum);
			
			while (sum < batchSize && left < right)
			{
				sum += candidates.get(left++);
			}
			
			System.out.println(count + ", " + ((sum-1) / batchSize + 1));
			
			count += (sum % batchSize == 0) ? 1 : 0;
			sum %= batchSize;
		}
		
		count += sum > 0 ? 1 : 0;
		return count;
    }
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	int[] groups1 = {1,2,3,4,5,6};
    	int batchSize1 = 3;
    	
    	int[] groups2 = {1,3,2,5,2,2,1,6};
    	int batchSize2 = 4;
    	
    	int[] groups3 = {369821235,311690424,74641571,179819879,171396603,274036220};
    	int batchSize3 = 3;
    	
    	int[] groups4 = {844438225,657615828,355556135,491931377,644089602,30037905,863899906,246536524,682224520};
    	int batchSize4 = 3;
    	
    	int[] groups5 = {369205928,981877451,947462486,899465743,737778942,573732515,520226542,824581298,571789442,251943251,70139785,778962318,43379662,90924712,142825931,182207697,178834435,978165687};
    	int batchSize5 = 6;
    	
    	int[] groups6 = {287773481,815094798,356732984,644469322,543193620,903158817,274116865,395252956,363839119,365378492,122313059,312690039,252532812};
    	int batchSize6 = 7;
    	
    	/***
    	System.out.println("*" + test.maxHappyGroups(batchSize1, groups1));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize2, groups2));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize3, groups3));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize4, groups4));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize5, groups5));
    	***/
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize6, groups6));
    }
}
