import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

/***
 * 
 * @author jackie
 * 
 * Think about Zuma Game. You have a row of balls on the table, colored red(R), yellow(Y), blue(B), green(G), and white(W). You also have several balls in your hand.

Each time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). Then, if there is a group of 3 or more balls in the same color touching, remove these balls. Keep doing this until no more balls can be removed.

Find the minimal balls you have to insert to remove all the balls on the table. If you cannot remove all the balls, output -1.

 

Example 1:

Input: board = "WRRBBW", hand = "RB"
Output: -1
Explanation: WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW
Example 2:

Input: board = "WWRRBBWW", hand = "WRBRW"
Output: 2
Explanation: WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> empty
Example 3:

Input: board = "G", hand = "GGGGG"
Output: 2
Explanation: G -> G[G] -> GG[G] -> empty 
Example 4:

Input: board = "RBYYBBRRB", hand = "YRBGB"
Output: 3
Explanation: RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty 
 

Constraints:

You may assume that the initial row of balls on the table wonâ€™t have any 3 or more consecutive balls with the same color.
1 <= board.length <= 16
1 <= hand.length <= 5
Both input strings will be non-empty and only contain characters 'R','Y','B','G','W'.
 */

public class Q488_Zuma_Game {
	private Map<String, Node> memo = new HashMap<>();
	
	public int findMinStep(String board, String hand) 
	{
		if (board == null || board.length() == 0 || hand == null || hand.length() == 0)
        {
            return -1;
        }
        
		Map<Character, Integer> status = new HashMap<>();
        
        for(char c : hand.toCharArray())
        {
        	status.put(c, status.getOrDefault(c, 0)+1);
        }
        
        Node result = backtrack(board, status);
        return result.needed == Integer.MAX_VALUE ? -1 : result.needed;
	}
	
	private Node backtrack(String board, Map<Character, Integer> status)
	{
		if (board == null || board.length() == 0) 
        {
            return new Node(0, new HashMap<>(status));
        }
		else if (memo.containsKey(board))
		{
			return memo.get(board);
		}
		
		Node result = new Node(Integer.MAX_VALUE, new HashMap<>(status)); 
		
		for (int i = 0; i < board.length(); i++)
		{
			for (char ball : status.keySet())
			{
				int count = status.getOrDefault(ball, 0);
				
				if (count > 0)
				{
					status.put(ball, count-1);
					
					String newBoard = board.substring(0, i) + ball + board.substring(i);
					String nextBoard = refreshBoard(newBoard);
					
					// if (board.equals("RRWWRRBBRWR"))
					// {
						System.out.println(String.format("hit here and use ball [%c] and current board is [%s], next board is [%s]", ball, newBoard, nextBoard));
					// }
					
					Node nextResult = backtrack(nextBoard, status);
					
					if (nextResult.needed != Integer.MAX_VALUE 
						&& result.needed > nextResult.needed+1)
					{
						result.needed = nextResult.needed+1;
					}
					
					status.put(ball, count);
				}
			}
		}
		
		memo.put(board, result);
		return result;
	}
	
	public String refreshBoard(String board)
    {
		Stack<Character> stack1 = new Stack<>();
		Stack<Integer> stack2 = new Stack<>();
		int index = 0;
		
		while (index < board.length())
		{
			char c = board.charAt(index);
			int count = 0;
			
			while (index < board.length() && board.charAt(index) == c)
			{
				count++;
				index++;
			}
			
			if (stack1.isEmpty() || stack1.peek() != c)
			{
				if (count < 3)
				{
					stack1.push(c);
					stack2.push(count);
				}
			}
			else
			{
				int totalCount = stack2.pop() + count;
				
				if (totalCount >= 3)
				{
					stack1.pop();
				}
				else
				{
					stack2.push(totalCount);
				}
			}
		}
		
    	StringBuilder builder = new StringBuilder();
    	
    	System.out.println(stack1.size());
        
        while (!stack1.isEmpty())
        {
        	char c = stack1.pop();
        	int count = stack2.pop();
        	
        	for (int i = 0; i < count; i++)
        	{
        		builder.append(c);
        	}
        }
        
        return builder.toString();
    }
	
	class Node
	{
		public int needed;
		public Map<Character, Integer> status;
		
		public Node(int needed, Map<Character, Integer> status)
		{
			this.needed = needed;
			this.status = status;
		}
	}
	
	
	/***
	public int findMinStep2(String board, String hand) 
    {
        if (board == null || board.length() == 0 || hand == null || hand.length() == 0)
        {
            return -1;
        }
        
        int[] count = new int[256];
        
        for(char x : hand.toCharArray())
        {
            count[x]++;
        }
        
        return backtrack(board, count);
    }
    
    private int backtrack(String board, int[] count)
    {
        if (board == null || board.length() == 0) 
        {
            return 0;
        }
        
        int result = Integer.MAX_VALUE; 
        int end = 0;
        
        while (end < board.length())
        {
            int start = end;
            char target = board.charAt(start);
            
            while (end < board.length() && board.charAt(end) == target)
            {
                end++;
            }
         
            int needed = 3 - (end - start);
            
            if (count[target] >= needed)
            {
            	int curUsed = (needed <= 0) ? 0 : needed; 
                count[board.charAt(start)] -= curUsed;
                String nextBoard = refreshBoard(board.substring(0, start) + board.substring(end));
                int nextUsed = backtrack(nextBoard, count);
                
                if (nextUsed >= 0)
                {
                    result = Math.min(result, curUsed + nextUsed);
                }
                
                count[board.charAt(start)] += curUsed;
            }
        }
        
        return result == Integer.MAX_VALUE ? -1 : result;
    }
    
    private String refreshBoard(String board)
    {
    	int end = 0;
    	StringBuilder builder = new StringBuilder();
        
        while (end < board.length())
        {
        	int start = end;
            char target = board.charAt(start);
            
            while (end < board.length() && board.charAt(end) == target)
            {
                end++;
            }
            
            if (end-start < 3)
            {
            	builder.append(board.substring(start, end));
            }
        }
        
        return builder.toString();
    }
    ***/
    
    
    
    
    
    
    
    public static void main(String[] args)
    {
    	String board1 = "WWBBWBBWW";
    	String hand1 = "BB";
    	
    	String board2 = "RRWWRRBBRR";
    	String hand2 = "WB";
    	
    	
    	// hit here and use ball [B] and current board is [RWRBBBRRWWRR], next board is [RRWWRWR]
    	
    	Q488_Zuma_Game test = new Q488_Zuma_Game();
    	System.out.println(test.refreshBoard("RWRBBBRRWWRR"));
    }
}
