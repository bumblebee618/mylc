import java.util.*;


public class Q000_A_Contest 
{
	public int getNumberOfBacklogOrders2(int[][] orders) 
    {
        if (orders == null || orders.length == 0 || orders[0].length != 3)
        {
            return 0;
        }
        
        int mod = 1_000_000_007;
        TreeMap<Integer, Long> buys = new TreeMap<>();
        TreeMap<Integer, Long> sells = new TreeMap<>();
        
        for (int[] order : orders)
        {
            // buy
            if (order[2] == 0)
            {
                long buyAmount = order[1];
                int buyPrice = order[0];
                
                while (buyAmount > 0)
                {
                    if (sells.size() == 0)
                    {
                        break;
                    }
                    
                    Map.Entry<Integer, Long> entry = sells.floorEntry(buyPrice);
                    
                    if (entry == null)
                    {
                        break;
                    }
                    
                    sells.remove(entry.getKey());
                    
                    if (entry.getValue() > buyAmount)
                    {
                        sells.put(entry.getKey(), entry.getValue() - buyAmount);
                        buyAmount = 0;
                    }
                    else
                    {
                        buyAmount -= entry.getValue();
                    }
                }
                
                if (buyAmount > 0)
                {
                    buyAmount = (buyAmount + buys.getOrDefault(buyPrice, 0L)) % mod;
                    buys.put(buyPrice, buyAmount);
                    
                    System.out.println("buy:" + buyPrice + ": " + buyAmount);
                }
            }
            // sell
            else
            {
                long sellAmount = order[1];
                int sellPrice = order[0];
                
                while (sellAmount > 0)
                {
                    if (buys.size() == 0)
                    {
                        break;
                    }
                    
                    Map.Entry<Integer, Long> entry = buys.ceilingEntry(sellPrice);
                    
                    if (entry == null)
                    {
                        break;
                    }
                    
                    buys.remove(entry.getKey());
                    
                    if (entry.getValue() > sellAmount)
                    {
                        buys.put(entry.getKey(), entry.getValue() - sellAmount);
                        sellAmount = 0;
                    }
                    else
                    {
                        sellAmount -= entry.getValue();
                    }
                }
                
                if (sellAmount > 0)
                {
                    sellAmount = (sellAmount + sells.getOrDefault(sellPrice, 0L)) % mod;
                    sells.put(sellPrice, sellAmount);
                    
                    System.out.println("sell:" + sellPrice + ": " + sellAmount);
                }
            }
        }
        
        long result = 0;
        
        for (Map.Entry<Integer, Long> entry : sells.entrySet())
        {
            result = (result + entry.getValue()) % mod;
            
            System.out.println("*sell:" + entry.getKey() + ": " + entry.getValue());
        }
        
        for (Map.Entry<Integer, Long> entry : buys.entrySet())
        {
            result = (result + entry.getValue()) % mod;
            
            System.out.println("*buy:" + entry.getKey() + ": " + entry.getValue());
        }
        
        return (int) result;
    }
	
	
	
	
	public int getNumberOfBacklogOrders(int[][] orders) 
    {
        if (orders == null || orders.length == 0 || orders[0].length != 3)
        {
            return 0;
        }
        
        int mod = 1_000_000_007;
        Queue<Node> buys = new PriorityQueue<>((a, b) -> b.price - a.price);
        Queue<Node> sells = new PriorityQueue<>((a, b) -> a.price - b.price);
        
        for (int[] order : orders)
        {
            // buy
            if (order[2] == 0)
            {
            	int buyAmount = order[1];
                int buyPrice = order[0];
                
            	while (buyAmount > 0 && !sells.isEmpty() && sells.peek().price <= buyPrice)
            	{
            		Node sell = sells.poll();
            		
            		if (sell.count > buyAmount)
            		{
            			sells.offer(new Node(sell.price, sell.count - buyAmount));
            			buyAmount = 0;
            		}
            		else
            		{
            			buyAmount -= sell.count;
            		}
            	}
            	
            	if (buyAmount > 0)
            	{
            		buys.offer(new Node(buyPrice, buyAmount));
            	}
            }
            else
            {
            	int sellAmount = order[1];
                int sellPrice = order[0];
                
            	while (sellAmount > 0 && !sells.isEmpty() && sells.peek().price >= sellPrice)
            	{
            		Node buy = buys.poll();
            		
            		if (buy.count > sellAmount)
            		{
            			buys.offer(new Node(buy.price, buy.count - sellAmount));
            			sellAmount = 0;
            		}
            		else
            		{
            			sellAmount -= buy.count;
            		}
            	}
            	
            	if (sellAmount > 0)
            	{
            		sells.offer(new Node(sellPrice, sellAmount));
            	}
            }
        }
        
        long result = 0;
        
        while (!sells.isEmpty())
        {
        	result = (result + sells.poll().count) % mod; 
        }
        
        while (!buys.isEmpty())
        {
        	result = (result + buys.poll().count) % mod; 
        }
        
        return (int) result;
    }
	
	class Node
	{
		public int price;
		public int count;
		
		public Node(int p, int c)
		{
			price = p;
			count = c;
		}
	}
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/

    	int[][] orders = {{10,5,0},{15,2,1},{25,1,1},{30,4,0}};
    	
    	int[][] orders2 = {
    			{27,30,0},{10,10,1},{28,17,1},{19,28,0},{16,8,1},{14,22,0},{12,18,1},{3,15,0},{25,6,1}
    			};
    	
    	// (27, 14), (19, 20), (14, 4), (3, 15)  
    	// (28, 17)
    	
    	System.out.println(test.getNumberOfBacklogOrders(orders2));
    	
    }
}
