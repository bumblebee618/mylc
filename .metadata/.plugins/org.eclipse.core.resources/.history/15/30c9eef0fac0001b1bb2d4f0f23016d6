import java.util.*;





public class Q000_A_Contest 
{	  
	private HashMap<Integer, Integer> memo = new HashMap<>();
	
	public int minimumXORSum(int[] nums1, int[] nums2) 
	{
		if (nums1 == null || nums1.length == 0 || nums2 == null || nums1.length != nums2.length)
		{
			return 0;
		}
		
        return search(nums1, nums2, 0, nums1.length, 0);
    }
	
	private int search(int[] nums1, int[] nums2, int i, int n, int status) 
	{
        if (i == n) 
        {
        	return 0;
        }
        else if (memo.containsKey(status)) 
        {
        	return memo.get(status);
        }
        
        int min = Integer.MAX_VALUE;
        
        for (int j = 0; j < n; j++) 
        {
            if ((status & (1 << j)) == 0) 
            {
                min = Math.min(min, (nums1[i] ^ nums2[j]) + search(nums1, nums2, i + 1, n, status | (1 << j)));
            }
        }
        
        memo.put(status, min);
        return min;
    } 
			
	
	
	
	public boolean isSumEqual(String firstWord, String secondWord, String targetWord) 
	{
		char[] letters1 = firstWord.toCharArray();
		char[] letters2 = secondWord.toCharArray();
		char[] letters3 = targetWord.toCharArray();
		
		for (int i = 0; i < letters1.length; i++)
		{
			letters1[i] = (char) (letters1[i] - 'a' + '0');
		}
		
		int num1 = Integer.parseInt(new String(letters1));
		
		for (int i = 0; i < letters2.length; i++)
		{
			letters2[i] = (char) (letters2[i] - 'a' + '0');
		}
		
		int num2 = Integer.parseInt(new String(letters2));
		
		for (int i = 0; i < letters3.length; i++)
		{
			letters3[i] = (char) (letters3[i] - 'a' + '0');
		}
		
		int num3 = Integer.parseInt(new String(letters3));
		return num1 + num2 == num3;
    }
	
	
	public String maxValue(String n, int x) 
	{
		int insertPos = -1;
		
		if (n.charAt(0) != '-')
		{
			for (int i = 0; i < n.length(); i++)
			{
				if (n.charAt(i) - '0' < x)
				{
					insertPos = i;
					break;
				}
			}
		}
		else
		{
			for (int i = 0; i < n.length(); i++)
			{
				if (n.charAt(i) - '0' > x)
				{
					insertPos = i;
					break;
				}
			}
		}
		
		if (insertPos != -1)
		{
			return n.substring(0, insertPos) + x + n.substring(insertPos);
		}
		else
		{
			return n + x;
		}
    }
	
	
	public int[] assignTasks(int[] servers, int[] tasks) 
	{
		Queue<Node> heap = new PriorityQueue<>((a, b) -> 
			(a.weight != b.weight) 
				? a.weight - b.weight 
				: a.id - b.id);
		
		Queue<Node> buff = new PriorityQueue<>((a, b) -> a.freeTime - b.freeTime);
		
		for (int i = 0; i < servers.length; i++)
		{
			buff.offer(new Node(0, i, servers[i]));
		}
		
		int[] result = new int[tasks.length];
		int curTime = 0, index = 0;
		
		while (index < tasks.length)
		{
			while (!buff.isEmpty() && buff.peek().freeTime <= curTime)
			{
				heap.offer(buff.poll());
			}
			
			if (!heap.isEmpty())
			{
				Node node = heap.poll();
				result[index] = node.id;
				buff.offer(new Node(curTime + tasks[index], node.id, node.weight));
				index++;
			}
			else
			{
				System.out.println("idle: " + curTime);
			}
			
			curTime++;
		}
		
		return result;
    }
	
	class Node
	{
		public int freeTime;
		public int id;
		public int weight;
		
		public Node (int f, int i, int w)
		{
			freeTime = f;
			id = i;
			weight = w;
		}
	}
	
									
									
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	/***
    	int[] servers1 = new int[] {3,3,2};
    	int[] tasks1 = new int[] {1,2,3,2,1,2};
    	int[] result1 = test.assignTasks(servers1, tasks1);
    	for (int result : result1)
    	{
    		System.out.print(result + ", ");
    	}
    	System.out.println();
    	
    	int[] servers2 = new int[] {5,1,4,3,2};
    	int[] tasks2 = new int[] {2,1,2,4,5,2,1};
    	int[] result2 = test.assignTasks(servers2, tasks2);
    	for (int result : result2)
    	{
    		System.out.print(result + ", ");
    	}
    	System.out.println();
    	***/
    	
    	int[] servers3 = new int[] {10,63,95,16,85,57,83,95,6,29,71};
    	int[] tasks3 = new int[] {70,31,83,15,32,67,98,65,56,48,38,90,5};
    	int[] result3 = test.assignTasks(servers3, tasks3);
    	for (int result : result3)
    	{
    		System.out.print(result + ", ");
    	}
    	System.out.println();
    }
}
