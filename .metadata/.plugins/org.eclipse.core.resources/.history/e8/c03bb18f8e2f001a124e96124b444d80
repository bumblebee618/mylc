import java.util.LinkedList;
import java.util.List;

/***
 * 
 * @author jackie
 * 
 * Given a string s and a list of strings dict, you need to add a closed pair of bold tag <b> and </b> to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them.
Example 1:
Input: 
s = "abcxyz123"
dict = ["abc","123"]
Output:
"<b>abc</b>xyz<b>123</b>"
Example 2:
Input: 
s = "aaabbcc"
dict = ["aaa","aab","bc"]
Output:
"<b>aaabbc</b>c"
Note:
The given dict won't contain duplicates, and its length won't exceed 100.
All the strings in input have length in range [1, 1000].
 */
public class Q616_Add_Bold_Tag_in_String {
private Trie root = new Trie();
    
    public String addBoldTag(String s, String[] dict) {
        if (s == null || s.length() == 0)
        {
            return s;
        }
        
        buildTrie(dict);
        int size = s.length(); 
        List<Interval> list = new LinkedList();
        
        for (int i = 0; i < size; i++)
        {
            int pos = findPos(s, i);
            
            if (pos == -1)
            {
                continue;
            }
            
            System.out.println("add [" + i + ", " + pos + "]");
            list.add(new Interval(i, pos));
        }
        
        List<Interval> mergedList = merge(list);
        StringBuilder builder = new StringBuilder();
        int needed = 0;
        
    	System.out.println("size of merged list is " + mergedList.size());
        
        for (Interval inter : mergedList)
        {
            if (needed != inter.start)
            {
            	String str1 = s.substring(needed, inter.start);
                builder.append(str1);
            }
            
            String str = s.substring(inter.start, inter.end+1);
            builder.append("<b>").append(str).append("</b>");
            needed = inter.end+1;
        }
        
        return builder.toString();
    }
    
    private List<Interval> merge(List<Interval> list)
    {
        List<Interval> result = new LinkedList<>();
        int start = -1, end = -1;
        
        for (Interval inter : list)
        {
            if (start == -1)
            {
                start = inter.start;
                end = inter.end;
            }
            else if (end >= inter.start)
            {
                start = Math.min(start, inter.start);
                end = Math.max(end, inter.end);
            }
            else
            {
                result.add(new Interval(start, end));
                start = inter.start;
                end = inter.end;
            }
        }
        
        result.add(new Interval(start, end));
        return result;
    }
    
    private int findPos(String s, int start)
    {
        Trie node = root;
        int index = start;
        
        while (index < s.length())
        {
            char c = s.charAt(index);
            
            if (node.children[c] == null)
            {
                break;
            }
            
            node = node.children[c];
            index++;
        }
        
        return node.isWord ? index-1 : -1;
    }
    
    private void buildTrie(String[] dict)
    {
        if (dict == null || dict.length == 0)
        {
            return;
        }
        
        for (String word : dict)
        {
            Trie node = root;
            
            for (char c : word.toCharArray())
            {
                if (node.children[c] == null)
                {
                    node.children[c] = new Trie();
                }
                
                node = node.children[c];
            }
            
            node.isWord = true;
        }
    }
    
    class Trie
    {
        public Trie[] children;
        public boolean isWord;
        
        public Trie()
        {
            children = new Trie[256];
            isWord = false;
        }
    }
    
    class Interval
    {
        public int start;
        public int end;
        
        public Interval(int s, int e)
        {
            start = s;
            end = e;
        }
    }

    
    
    
    public static void main(String[] args)
    {
    	Q616_Add_Bold_Tag_in_String test = new Q616_Add_Bold_Tag_in_String();
    	String s1 = "abcxyz123";
    	String[] dict1 = {"abc","123"};
    	
    	String s2 = "aaabbcc";
    	String[] dict2 = {"aaa","aab", "bc"};
    	
    	String result = test.addBoldTag(s2, dict2);
    	System.out.println(result);
    }
}
