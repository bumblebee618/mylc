import java.util.PriorityQueue;
import java.util.Queue;

public class ElevatorManager implements Runnable
{
	private Queue<Integer> upRequestsQueue1;
	private Queue<Integer> upRequestsQueue2;
	
	private Queue<Integer> downRequestsQueue1;
	private Queue<Integer> downRequestsQueue2;
	
	private Elevator elevator;
	private boolean isUp;
	
	public ElevatorManager()
	{
		upRequestsQueue1 = new PriorityQueue<Integer>(1, (a, b) -> a - b);
		upRequestsQueue2 = new PriorityQueue<Integer>(1, (a, b) -> a - b);
		
		downRequestsQueue1 = new PriorityQueue<Integer>(1, (a, b) -> b - a);
		downRequestsQueue2 = new PriorityQueue<Integer>(1, (a, b) -> b - a);
		
		elevator = ElevatorFactory.getElevator();
		isUp = true;
	}
	
	public void run() 
	{
		while (true) 
		{
			processRequest(upRequestsQueue1, downRequestsQueue1);
			processRequest(upRequestsQueue2, downRequestsQueue2);
		}
	}
	
	public void pressButton(int fromFloor, int toFloor)
	{
		addRequest(new Request(fromFloor, toFloor));
	}
	
	private void processRequest(Queue<Integer> upRequestsQueue, Queue<Integer> downRequestsQueue)
	{
		if (!upRequestsQueue.isEmpty())
		{
			isUp = true;
			
			while (!upRequestsQueue.isEmpty())
			{
				int targetFloor = upRequestsQueue.poll();
				elevator.moveToTargetFloor(targetFloor);
				processingTime(1000);
			}
		}
		
		if (!downRequestsQueue.isEmpty())
		{
			isUp = false;
			
			while (!downRequestsQueue.isEmpty())
			{
				int targetFloor = downRequestsQueue.poll();
				elevator.moveToTargetFloor(targetFloor);
				processingTime(1000);
			}
		}
	}
	
	private void addRequest(Request request)
	{
		if (request.isUp())
		{
			if (request.getFromFloor() > elevator.getCurrentFloor())
			{
				upRequestsQueue1.add(request.getFromFloor());
				upRequestsQueue1.add(request.getToFloor());
			}
			else
			{
				upRequestsQueue2.add(request.getFromFloor());
				upRequestsQueue2.add(request.getToFloor());
			}
		}
		else
		{
			if (request.getFromFloor() < elevator.getCurrentFloor())
			{
				downRequestsQueue1.add(request.getFromFloor());
				downRequestsQueue1.add(request.getToFloor());
			}
			else
			{
				downRequestsQueue2.add(request.getFromFloor());
				downRequestsQueue2.add(request.getToFloor());
			}
		}
	}
	
	private void processingTime(int time)
	{
		try 
		{
			Thread.sleep(time);
			System.out.println("Move to " + ElevatorFactory.getElevator().getCurrentFloor() + " floor");
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
	}
}
