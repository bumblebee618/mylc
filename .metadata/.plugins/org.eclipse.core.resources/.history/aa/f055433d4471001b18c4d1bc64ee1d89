import java.util.*;

/***
 * 
 * @author jackie
 * 
 * There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

 

Example 1:



Input: times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
Output: 2
 

Note:

N will be in the range [1, 100].
K will be in the range [1, N].
The length of times will be in the range [1, 6000].
All edges times[i] = (u, v, w) will have 1 <= u, v <= N and 0 <= w <= 100.
 */
public class Q743_Network_Delay_Time 
{
	public int networkDelayTime(int[][] times, int N, int K) 
	{
        if (times == null || times.length == 0 || times[0].length == 0 || N <= 0 || K <= 0)
        {
            return 0;
        }
        
        Set<Node>[] graph = new Set[N+1];
        
        for (int[] time : times)
        {
            if (graph[time[0]] == null)
            {
                graph[time[0]] = new HashSet<>();
            }
            
            graph[time[0]].add(new Node(time[1], time[2]));
        }
        
        Queue<Node> queue = new LinkedList<>();
        queue.offer(new Node(K, 0));
        Set<Integer> visited = new HashSet<>();
        visited.add(K);
        int[] costs = new int[N+1];
        
        while (!queue.isEmpty())
        {
        	Node t = queue.poll();
            
            if (graph[t.node] == null)
            {
                continue;
            }
            
            for (Node next : graph[t.node])
            {
                if (!visited.contains(next.node) || costs[next.node] > costs[t.node] + next.time)
                {
                    costs[next.node] = costs[t.node] + next.time;
                    queue.offer(next);
                    visited.add(next.node);
                }
            }
        }
        
        if (visited.size() != N)
        {
            return -1;
        }
        
        int result = 0;
        
        for (int cost : costs)
        {
            result = Math.max(result, cost);
        }

        return result;
    }
    
    class Node 
    {
        public int node;
        public int time;
        
        public Node(int n, int t)
        {
            node = n;
            time = t;
        }
    }
}
