import javax.print.attribute.standard.PrinterMoreInfoManufacturer;

/***
 * 
 * @author jackie
 * 
 * Given a m * n matrix mat of integers, sort it diagonally in ascending order from the top-left to the bottom-right then return the sorted array.

 

Example 1:


Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 100
1 <= mat[i][j] <= 100
 */
public class Q1329_Sort_the_Matrix_Diagonally {
	private int row;
    private int col;
    private int step;
    
    public int[][] diagonalSort(int[][] mat) 
    {
        if (mat == null || mat.length == 0 || mat[0].length == 0)
        {
            return new int[0][0];
        }
        
        row = mat.length;
        col = mat[0].length;
        step = col+1;
        
        for (int i = 0; i < col; i++)
        {
            sort(mat, i);
        }
        
        /***
        for (int i = 1; i < row; i++)
        {
            sort(mat, i * col);
        }
        ***/
        
        return mat;
    }
    
    private void sort(int[][] mat, int startPos)
    {
        for (int i = startPos; i < row*col; i += step)
        {
            int candidate = mat[i/col][i%col];
            int candidatePos = -1;
            
            System.out.println("i=" + i + ", i_x=" + (i/col) + ", i_y=" + (i%col) + ", value = " + mat[i/col][i%col]);
                
            for (int j = i+step; j < row*col; j += step)
            {
            	
            	System.out.println("j=" + j + ", j_x=" + (j/col) + ", j_y=" + (j%col) + ", value = " + mat[j/col][j%col]);
            	
            	
                if (mat[j/col][j%col] < candidate)
                {
                    candidatePos = j;
                    candidate = mat[j/col][j%col];
                }
            }
            
            if (candidatePos != -1)
            {
            	System.out.println("switch: i=" + i + ", candiate=" + candidatePos);
            	
                int temp = mat[i/col][i%col];
                mat[i/col][i%col] = mat[candidatePos/col][candidatePos%col];
                mat[candidatePos/col][candidatePos%col] = temp;
            }
            
            System.out.println("$$$$");
        }
    }
    
    
    
    private static void printMat(int[][] mat)
    {
    	for (int[] row : mat)
    	{
    		for (int num : row)
    		{
    			System.out.print(num + ", ");
    		}
    		
    		System.out.println();
    	}
    }
    
    public static void main(String[] args)
    {
    	Q1329_Sort_the_Matrix_Diagonally test = new Q1329_Sort_the_Matrix_Diagonally();
    	// int[][] mat = new int[][] {{3,3,1,1}, {2,2,1,2}, {1,1,1,2}};
    	int[][] mat = new int[][] {
    		{11,25,66,1,69,7}, 
    		{23,55,17,45,15,52}, 
    		{75,31,36,44,58,8}, 
    		{22,27,33,25,68,4},
    		{84,28,14,11,5,50}
    		};
    	printMat(mat);
    	System.out.println("*******");
    	printMat(test.diagonalSort(mat));
    }
}
