import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class Q_bus_route_with_path {
	private Set<Integer>[] routeGraph;
	private Map<Integer, Set<Integer>> stopToRouteMap;
	private Set<Integer> visitedStops;
	private Set<Integer> visitedRoutes;
	
	public int numBusesToDestination(int[][] routes, int source, int target) {
        if (routes == null || routes.length == 0 || routes[0].length == 0 || source < 0 || target < 0) {
            return -1;
        } else if (source == target) {
            return 0;
        }
        
        int routeSize = routes.length;
        routeGraph = new Set[routeSize];
        stopToRouteMap = new HashMap<>();
        visitedRoutes = new HashSet<>();
        visitedStops = new HashSet<>();
        
        for (int i = 0; i < routeSize; i++) {
        	routeGraph[i] = new HashSet<>();
        	
        	for (int stop : routes[i]) {
        		stopToRouteMap.computeIfAbsent(stop, x -> new HashSet<>()).add(i);
        	}
        }
        
        if (!stopToRouteMap.containsKey(source) || !stopToRouteMap.containsKey(target)) {
            return -1;
        }
        
        Queue<Integer> queue = new LinkedList<>();
        visitedStops.add(source);
        
        for (int route : stopToRouteMap.get(source)) {
        	queue.offer(route);
        	visitedRoutes.add(route);
        }
        
        int step = 0;
        
        while (!queue.isEmpty()) {
        	int size = queue.size();
        	step++;
        	
        	for (int i = 0; i < size; i++) {
        		int curRoute = queue.poll();
        		
        		if (routeGraph[curRoute].contains(target)) {
        			return step;
        		}
        		
        		findNextRoute(queue, curRoute);
        	}
        }
        
        return -1;
	}
	
	private void findNextRoute(Queue<Integer> queue, int route) {
		for (int stop : stopToRouteMap.get(route)) {
			if (visitedStops.contains(stop) || !stopToRouteMap.containsKey(stop)) {
				continue;
			}
			
			for (int nextRoute : stopToRouteMap.get(stop)) {
				if (!visitedRoutes.contains(nextRoute)) {
					queue.offer(nextRoute);
					visitedRoutes.add(nextRoute);
				}
			}
		}
	}
}
