import java.util.*;
import java.util.function.UnaryOperator;






public class Q000_A_Contest 
{	  
	public int eliminateMaximum(int[] dist, int[] speed) 
    {
		if (dist == null || dist.length == 0 || speed == null || dist.length != speed.length)
		{
			return 0;
		}
		
		int count = 0;
		int size = dist.length;
		double[] mins = new double[size];
		
		for (int i = 0; i < size; i++)
		{
			mins[i] = (double) dist[i] / speed[i];
		}
		
		Arrays.sort(mins);
		int currentTime = 0;
		
		for (int i = 0; i < size; i++)
		{
			if ((double) currentTime >= mins[i])
			{
				break;
			}
			
			count++;
			currentTime++;
		}
		
		return count;
    }
	
	
	public int countGoodNumbers(long n) 
	{
		if (n <= 0)
		{
			return 0;
		}
		else if (n == 1)
		{
			return 5;
		}
		
		int mod = 1_000_000_007;
		int oddSize = (int) (n / 2);
		long oddCount = getValue(oddSize, 4);
		long evenCount = getValue(oddSize, 5);
		
		if (n % 2 == 1)
		{
			evenCount = (evenCount * 5) % mod;
		}

		return (int) ((evenCount * oddCount) % mod);
    }	
	
	private long getValue(long index, long base)
	{
		long result = 1;
		int mod = 1_000_000_007;
		
		while (index > 1)
		{
			if (index % 2 == 1)
			{
				result = (result * base) % mod;
			}
			
			base = (base * base) % mod;
			index /= 2;
		}
		
		return (result * base) % mod;
	}
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/

    	System.out.println(test.countGoodNumbers(1));
    	
    	System.out.println(test.countGoodNumbers(4));
    	
    	System.out.println(test.countGoodNumbers(50));
    	
    }
}
