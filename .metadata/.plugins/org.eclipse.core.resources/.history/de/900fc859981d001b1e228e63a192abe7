import java.util.*;

public class Q1376_Time_Needed_to_Inform_All_Employees 
{
	private int maxTime = 0;
    
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) 
    {
        if (n <= 0 || headID < 0 || manager.length == 0 || informTime.length == 0 || manager.length != informTime.length)
        {
            return 0;        
        }
        else if (manager[headID] != -1)
        {
            return 0;
        }
        
        Map<Integer, List<Integer>> map = new HashMap<>();
        
        for (int i = 0; i < manager.length; i++)
        {
            if (i == headID)
            {
                continue;
            }
            
            map.computeIfAbsent(manager[i], x -> new LinkedList<>()).add(i);
        }
        
        dfs(map, headID, informTime[headID], informTime);
        return maxTime;
    }
    
    private void dfs(Map<Integer, List<Integer>> map, int node, int curTime, int[] informTime)
    {
        if (!map.containsKey(node))
        {
            return;
        }
        
        maxTime = Math.max(maxTime, curTime);
        
        for (int next : map.get(node))
        {
            dfs(map, next, curTime + informTime[next], informTime);
        }
    }
}
