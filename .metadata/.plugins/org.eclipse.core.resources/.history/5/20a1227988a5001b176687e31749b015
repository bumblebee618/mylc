import java.util.*;



public class Q000_A_Contest 
{
	      if (set.size() == 5)
            {
                result = Math.max(result, front-back);
            }
        }
        
        return result;
    }
	
	
	public int maxBuilding2(int n, int[][] restrictions) 
    {
        if (n <= 0)
        {
            return 0;
        }
        else if (restrictions == null || restrictions.length == 0)
        {
            return n-1;
        }
        
        int result = 1;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(1, 0);
        
        TreeMap<Integer, Integer> treeMap = new TreeMap<>();
        
        for (int[] restriction : restrictions)
        {
        	treeMap.put(restriction[0], restriction[1]);
        }
        
        Integer curIndex = 1;
        
        while (curIndex != null)
        {
        	Integer nextIndex = treeMap.ceilingKey(curIndex+1);
        	
        	if (nextIndex != null)
        	{
        		int expectHeight = map.get(curIndex) + (nextIndex - curIndex);
        		int nextLimit = treeMap.get(nextIndex);
        		
        		if (expectHeight <= nextLimit)
        		{
        			map.put(nextIndex, expectHeight);
        			result = Math.max(result, expectHeight);
        			
        			// System.out.println("1: nextIndex = " + nextIndex + ", h = " + expectHeight);
        		}
        		else
        		{
        			map.put(nextIndex, nextLimit);
        			int tmpIndex = (curIndex + nextIndex + nextLimit - map.get(curIndex)) / 2;
        			int tmpHeight = map.get(curIndex) + (tmpIndex-curIndex);
        			result = Math.max(result, tmpHeight);
        			
        			// System.out.println("2: nextIndex = " + nextIndex + ", h = " + nextLimit + ", max = " + tmpHeight);
        		}
        	}
        	
        	curIndex = nextIndex;
        }
        
        return result;
    }
	
	
	public int maxBuilding(int n, int[][] restrictions) 
    {
        if (n <= 0)
        {
            return 0;
        }
        else if (restrictions == null || restrictions.length == 0)
        {
            return n-1;
        }
        
        int size = restrictions.length;
        Arrays.sort(restrictions, (a,b) -> a[0]-b[0]);
        int[] height = new int[size]; 
        height[0] = Math.min(restrictions[0][1], restrictions[0][0]-1);
        
        for (int i = 1; i < size; i++)
        {
            height[i] = Math.min(restrictions[i][0] - restrictions[i-1][0] + height[i-1], restrictions[i][1]);
        }
        
        for (int i = size-2; i >= 0; i--)
        {
            height[i] = Math.min(height[i], restrictions[i+1][0] - restrictions[i][0] + height[i+1]);
        }
        
        int result = Math.max(height[0], n - restrictions[size-1][0] + height[size-1]);
        
        for (int i = 1; i < size; i++)
        {
        	result = Math.max(result, Math.max(height[i], height[i-1]) + (restrictions[i][0] - restrictions[i-1][0] - Math.abs(height[i]-height[i-1]))/2);
        }
        
        return result;
    }
	
    
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
 
    	int n1 = 5;
    	int[][] restrictions1 = {{2,1},{4,1}};
    	
    	int n2 = 10;
    	int[][] restrictions2 = {{5,3},{2,5},{7,4},{10,3}};
    	
    	System.out.println(test.maxBuilding(n1, restrictions1));
    	System.out.println(test.maxBuilding(n2, restrictions2));
    }
}
