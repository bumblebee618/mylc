import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;
/*******
 * 
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

For example,
	Given [[0, 30],[5, 10],[15, 20]],
	return 2.
	
 * 
 * */

public class Q253_Meeting_Rooms_II {
	// solution 1:
	public int minMeetingRooms(int[][] intervals) {
        if (intervals == null || intervals.length == 0 || intervals[0].length == 0) {
            return 0;
        }
        
        TreeMap<Integer, Integer> treeMap = new TreeMap<>();
        
        for (int[] interval : intervals) {
            treeMap.put(interval[0], treeMap.getOrDefault(interval[0], 0)+1);
            treeMap.put(interval[1], treeMap.getOrDefault(interval[1], 0)-1);
        }
        
        int curCount = 0, maxCount = 0;
        
        for (Map.Entry<Integer, Integer> entry : treeMap.entrySet()) {
            curCount += entry.getValue();
            maxCount = Math.max(maxCount, curCount);
        }
        
        return maxCount;
    }

	
	// solution 2:
	public int minMeetingRooms2(int[][] intervals) {
        if (intervals == null || intervals.length == 0 || intervals[0].length == 0) {
            return 0;
        }
        
        Queue<int[]> heap = new PriorityQueue<>((a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            } else if (a[1] == 1 && b[1] != 1){
                return -1;   
            } else if (a[1] != 1 && b[1] == 1) {
                return 1;
            } else {
                return 0;
            }
        });
        
        for (int[] interval : intervals) {
            heap.offer(new int[] {interval[0], 0});
            heap.offer(new int[] {interval[1], 1});
        }
        
        int curMax = 0, result = 0;
        
        while (!heap.isEmpty()) {
            int[] node = heap.poll();
            curMax += node[1] == 1 ? -1 : 1;
            result = Math.max(result, curMax);
        }
        
        return result;
    }
}
