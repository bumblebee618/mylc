/***
 * 
 * On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

 

Example 1:


Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Example 2:


Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.
Example 3:


Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
 

Constraints:

board.length == 2
board[i].length == 3
0 <= board[i][j] <= 5
Each value board[i][j] is unique.
 *
 */
public class Q773_Sliding_Puzzle {
	public int slidingPuzzle(int[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0) {
            return -1;
        }
        
        String target = "123450";
        int[][] changes = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        
        StringBuilder builder = new StringBuilder();
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                builder.append(board[i][j]);
            }
        }
        
        Queue<String> queue = new LinkedList<>();
        queue.offer(builder.toString());
        Set<String> visited = new HashSet<>();
        visited.add(builder.toString());
        int step = 0;
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            
            for (int i = 0; i < size; i++) {
                String curStr = queue.poll();
                
                if (target.equals(curStr)) {
                    return step;
                }
                
                int curIndex = curStr.indexOf('0');
                
                for (int change : changes[curIndex]) {
                    String nextStr = swap(curStr, curIndex, change);
                    
                    if (!visited.contains(nextStr)) {
                        queue.offer(nextStr);
                        visited.add(nextStr);
                    }
                }
            }
            
            step++;
        }
        
        return -1;
    }
    
    private String swap(String curStr, int curIndex, int newIndex) {
        char[] letters = curStr.toCharArray();
        char tmp = letters[curIndex];
        letters[curIndex] = letters[newIndex];
        letters[newIndex] = tmp;
        return new String(letters);
    }
}
