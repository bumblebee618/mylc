import java.util.*;

public class Q000_A_Contest 
{	  
	public String reversePrefix(String word, char ch) {
        int index = -1;
        
        for (int i = 0; i < word.length(); i++) {
            if (word.charAt(i) == ch) {
                index = i;
                break;
            }
        }
        
        if (index != -1) {
            return new StringBuilder(word.substring(0, index+1)).reverse().append(word.substring(index+1)).toString(); 
        } else {
        	return word;
        }
    }
     
	
	
	public long interchangeableRectangles(int[][] rectangles) {
        Map<Double, Integer> map = new HashMap<>();
        
        for (int[] rectangle : rectangles) {
        	int gcd = getGcd(rectangle[0], rectangle[1]);
        	double ratio = (rectangle[0] / gcd) / (rectangle[1] / gcd * 1.0);
        	map.put(ratio, map.getOrDefault(ratio, 0)+1);
        }
        
        int result = 0;
        
        for (Map.Entry<Double, Integer> entry : map.entrySet()) {
        	int count = entry.getValue();
        	
        	if (count > 1) {
        		result += count * (count-1) / 2;
        	}
        }
        
        return result;
    }
	
	
	
	public int getGcd(int a, int b) {
		if (b == 0) {
			return a;
		}
		
		while (a % b != 0) {
			int tmp = a % b;
			a = b;
			b = tmp;
		}
		
		return b;
	}
	
	
	
	
	private Map<Integer, Integer> memo = new HashMap<>();
	
	public int maxProduct(String s) {
		int result = 0;
		
		for (int start = 0; start < s.length(); start++) {
			search(s, start, s.length()-1, 0, 0);
		}
       
		for (Map.Entry<Integer, Integer> entry1 : memo.entrySet()) {
			for (Map.Entry<Integer, Integer> entry2 : memo.entrySet()) {
    		   if ((entry1.getKey() & entry2.getKey()) == 0) {
    			   // System.out.println(entry1.getKey() + ", " + entry2.getKey());
    			   
    			   result = Math.max(result, entry1.getValue() * entry2.getValue());
    		   }
			}
		}
		
		return result;
    }
	
	private void search(String s, int start, int end, int status, int count) {
		if (start > end) {
			return;
		}
		
		char target = s.charAt(start);
		
		while (start <= end) {
			if (s.charAt(end) == target) {
				int nextStatus = status & (1 << start);
				
				System.out.println("1: " + nextStatus + ", " + start + ", " + end);
				
				nextStatus = nextStatus & (1 << end);
				memo.put(nextStatus, count+2);
				
				System.out.println("2: " + (1 << start));
				
				search(s, start, end-1, nextStatus, count+2);
			} else {
				int nextStatus = status & (1 << end);
				memo.put(nextStatus, count+1);
				
				System.out.println("3: " + nextStatus);
			}
			
			end--;
		}
	}
	
    
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	int[][] rectangles1 = {{4,8},{3,6},{10,20},{15,30}};
    	int[][] rectangles2 = {{4,5},{7,8}};
    	
    	// System.out.println(test.getGcd(15, 5));
    	// System.out.println(test.interchangeableRectangles(rectangles1));
    	// System.out.println(test.interchangeableRectangles(rectangles2));
    	
    	
    	
    	String s = "bb";
    	
    	System.out.println(test.maxProduct(s));
    }
}
