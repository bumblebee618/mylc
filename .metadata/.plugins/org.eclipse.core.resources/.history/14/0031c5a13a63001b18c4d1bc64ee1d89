/***
 * 
 * @author jackie
 * 
 * Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.

A subarray is a contiguous subsequence of the array.

Return the length of the shortest subarray to remove.

 

Example 1:

Input: arr = [1,2,3,10,4,2,3,5]
Output: 3
Explanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.
Another correct solution is to remove the subarray [3,10,4].
Example 2:

Input: arr = [5,4,3,2,1]
Output: 4
Explanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].
Example 3:

Input: arr = [1,2,3]
Output: 0
Explanation: The array is already non-decreasing. We do not need to remove any elements.
Example 4:

Input: arr = [1]
Output: 0
 

Constraints:

1 <= arr.length <= 10^5
0 <= arr[i] <= 10^9
 */
public class Q1574_Shortest_Subarray_to_be_Removed_to_Make_Array_Sorted 
{
	public int findLengthOfShortestSubarray2(int[] arr) 
    {
        if (arr == null || arr.length <= 1)
        {
            return 0;
        }
        
        int firstPos = -1, lastPos = -1;
        
        for (int i = 0; i < arr.length-1; i++)
        {
            if (arr[i] > arr[i+1])
            {
                if (firstPos == -1)
                {
                    firstPos = i;
                    lastPos = i;
                }
                else
                {
                    lastPos = i;
                }
            }
        }
        
        System.out.println(firstPos + ", " + lastPos);
        System.out.println(arr[firstPos] + ", " + arr[lastPos]);
        
        if (firstPos == -1)
        {
            return 0;
        }
        
        int index1 = lastPos + 1;
        int target = arr[firstPos];
        
        while (index1 < arr.length && arr[index1] < target)
        {
            index1++;
        }
        
        int index2 = lastPos + 1;
        target = firstPos == 0 ? Integer.MIN_VALUE : arr[firstPos-1];
            
        while (index2 < arr.length && arr[index2] < target)
        {
            index2++;
        }
        
        System.out.println("index1 = " + index1 +  ", index2 = " + index2);
        
        int len1 = (firstPos+1) + (arr.length-index1);
        int len2 = (index2 == arr.length) ? arr.length-(lastPos+1) : firstPos+(arr.length-index2);
        return arr.length - Math.max(len1, len2);
        
        /***
        int len1 = index1 - firstPos - 1;
        int len2 = (index1 == arr.length && index2 == arr.length) ? lastPos + 1 : index2 - firstPos;
        return Math.min(len1, len2);
        ***/
    }
	
	
	public int findLengthOfShortestSubarray(int[] arr) 
    {
        if (arr == null || arr.length <= 1)
        {
            return 0;
        }
        
        int firstPos = -1, lastPos = -1;
        
        for (int i = 0; i < arr.length-1; i++)
        {
            if (arr[i] > arr[i+1])
            {
                if (firstPos == -1)
                {
                    firstPos = i;
                    lastPos = i;
                }
                else
                {
                    lastPos = i;
                }
            }
        }
        
        System.out.println(firstPos + ", " + lastPos);
        System.out.println(arr[firstPos] + ", " + arr[lastPos]);
        
        if (firstPos == -1)
        {
            return 0;
        }
        
        int left = firstPos;
        int leftTarget = lastPos+1 < arr.length ? arr[lastPos+1] : Integer.MAX_VALUE;
        
        while (left >= 0 && arr[left] > leftTarget)
        {
        	left--;
        }
        
        int right = lastPos+1;
        int rightTarget = firstPos-1 >= 0 ? arr[firstPos-1] : Integer.MIN_VALUE;
        
        while (right < arr.length && arr[right] < rightTarget)
        {
        	right++;
        }
        
        int currentDelete = lastPos - firstPos;
        
        System.out.println(currentDelete);
        System.out.println(left + ", " + right);
        
        int delete1 = firstPos - left;
        int delete2 = right - lastPos;
        return currentDelete + Math.min(delete1, delete2);
    }
	
	
	
	
	public static void main(String[] args)
	{
		Q1574_Shortest_Subarray_to_be_Removed_to_Make_Array_Sorted test = new Q1574_Shortest_Subarray_to_be_Removed_to_Make_Array_Sorted();
		int[] arr1 = {1,2,3,10,4,2,3,5};
		int[] arr2 = {58,68,54,45,52,21,33,35,54,22,58,13,67,31,25,66,27,75,57,81,30,44,22,45,34,21,8,11,82,60,37,35,3,44,31,80,40,74,1,2,47};
		int[] arr3 = {22,37,59,16,42,32,29,53,9,55,29,3,4,1,49,17,37,31,27,45,33,24,54,51,32,51,54,31,36,53};
		int[] arr4 = {1,2,3,10,0,7,8,9};
		// System.out.println(arr3.length);
		System.out.println(test.findLengthOfShortestSubarray(arr1));
		System.out.println(test.findLengthOfShortestSubarray(arr2));
		System.out.println(test.findLengthOfShortestSubarray(arr3));
		System.out.println(test.findLengthOfShortestSubarray(arr4));
		// System.out.println(test.findLengthOfShortestSubarray2(arr2));
		
		// 1, 2, [3], 2, 3, 5 -> 5
		// 58, [68], 1, 2, 47 -> 3
		// 22, 37, [59], 31, 36, 53 -> 4
		// 1, 2, 3, [10], 0, 7, 8, 9
	}
}
