import java.util.*;





public class Q000_A_Contest 
{	  
	public boolean isCovered(int[][] ranges, int left, int right) 
	{
		if (ranges == null || ranges.length == 0 || ranges[0].length != 2 || left > right)
		{
			return false;
		}
		
		Arrays.sort(ranges, (a, b) -> (a[0] != b[0]) ? a[0]-b[0] : a[1]-b[1]);
		int start = ranges[0][0], end = ranges[0][1], size = ranges.length;
		List<int[]> list = new ArrayList<>();
		
		for (int i = 1; i < size; i++)
		{
			if (end+1 >= ranges[i][0])
			{
				end = Math.max(end, ranges[i][1]);
				continue;
			}
			
			if (start <= left && end >= right)
			{
				return true;
			}
			
			list.add(new int[] {start, end});
			start = ranges[i][0];
			end = ranges[i][1];
		}
		
		if (start <= left && end >= right)
		{
			return true;
		}
		
		return false;
    }
	
	
	
	public int chalkReplacer(int[] chalk, int k) 
	{
        if (chalk == null || chalk.length == 0 || k < 0)
        {
        	return -1;
        }
        
        long sum = 0;
        
        for (int num : chalk)
        {
        	sum += (long) num;
        }
        
        sum = (long) k % sum; 
        
        for (int i = 0; i < chalk.length; i++)
        {
        	if (sum < (long) chalk[i])
        	{
        		return i;
        	}
        	
        	sum -= (long) chalk[i];
        }
        
        return -1;
    }
	
	private int[][] rowSum;
	private int[][] colSum;
	private int[][] diagSum;
	private int[][] antiDiagSum;
	private int row, col;
	
	public int largestMagicSquare(int[][] grid) 
	{
		if (grid == null || grid.length == 0 || grid[0].length == 0)
		{
			return 0;
		}
		
		row = grid.length; 
		col = grid[0].length;
		int result = 1, side = Math.min(row, col);
		
		rowSum = new int[row][col];
		colSum = new int[row][col];
		diagSum = new int[row][col];
		antiDiagSum = new int[row][col];
		
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				rowSum[i][j] = j > 0 ? rowSum[i][j-1] + grid[i][j] : grid[i][j];
				colSum[i][j] = i > 0 ? rowSum[i-1][j] + grid[i][j] : grid[i][j];
				diagSum[i][j] = (i > 0 && j > 0) ? diagSum[i-1][j-1] + grid[i][j] : grid[i][j];
				antiDiagSum[i][j] = (i > 0 && j+1 < col) ? antiDiagSum[i-1][j+1] + grid[i][j] : grid[i][j];
			}
		}
		
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				for (int k = 1; k < side; k++)
				{
					if (i+k >= row || j+k >= col)
					{
						break;
					}
					
					int diagResult = getDiagSum(i, i+k, j, j+k);
					
					if (diagResult != getAntiDiagSum(i, i+k, j+k, j))
					{
						break;
					}
					
					// System.out.println(i + "," + j + ": " + diagResult);
					
					boolean found = true;
					
					for (int x = 0; x < k; x++)
					{
						if (diagResult != getRowSum(i+x, j, j+k))
						{
							found = false;
							break;
						}
						
						System.out.println(i + "," + j + ": " + diagResult);
						
						if (diagResult != getColSum(j+k, i, i+k))
						{
							found = false;
							break;
						}
					}
					
					if (found)
					{
						result = Math.max(result, k+1);
					}
				}
			}
		}
		
		return result;
    }
	
	private int getRowSum(int row, int start, int end)
	{
		return start > 0 ? rowSum[row][end] - rowSum[row][start-1] : rowSum[row][end];
	}
	
	private int getColSum(int col, int start, int end)
	{
		return start > 0 ? colSum[end][col] - colSum[start-1][col] : colSum[end][col];
	}
	
	private int getDiagSum(int startRow, int endRow, int startCol, int endCol)
	{
		return startRow > 0 && startCol > 0 ? diagSum[endRow][endCol] - diagSum[startRow-1][startCol-1] : diagSum[endRow][endCol];
	}
	
	private int getAntiDiagSum(int startRow, int endRow, int startCol, int endCol)
	{
		return startRow > 0 && startCol+1 < col ? antiDiagSum[endRow][endCol] - antiDiagSum[startRow-1][startCol+1] : antiDiagSum[endRow][endCol];
	}
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	int[][] grid = {{5,1,3,1},{9,3,3,1},{1,3,3,8}};
    	
    	System.out.println(test.largestMagicSquare(grid));
    }
}
