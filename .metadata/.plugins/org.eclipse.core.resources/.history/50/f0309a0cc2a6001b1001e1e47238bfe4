import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.swing.text.html.parser.DocumentParser;

/***
 * 
 * @author jackie
 * 
 * You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.

You start your journey from building 0 and move to the next building by possibly using bricks or ladders.

While moving from building i to building i+1 (0-indexed),

If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.
Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.

 

Example 1:


Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
Output: 4
Explanation: Starting at building 0, you can follow these steps:
- Go to building 1 without using ladders nor bricks since 4 >= 2.
- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.
- Go to building 3 without using ladders nor bricks since 7 >= 6.
- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.
It is impossible to go beyond building 4 because you do not have any more bricks or ladders.
Example 2:

Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
Output: 7
Example 3:

Input: heights = [14,3,19,3], bricks = 17, ladders = 0
Output: 3
 

Constraints:

1 <= heights.length <= 105
1 <= heights[i] <= 106
0 <= bricks <= 109
0 <= ladders <= heights.length
 */

public class Q1642_Furthest_Building_You_Can_Reach 
{
	private List<int[]>[] jumps;
	private int[] heights;
	
	// solution 1:
	public int furthestBuilding(int[] heights, int bricks, int ladders) 
    {
		if (heights == null || heights.length == 0 || (bricks < 0 && ladders < 0))
        {
            return 0;   
        }
		
		this.heights = heights;
		int result = 0, size = heights.length;
		jumps = new List[size];
		jumps[0] = new LinkedList<>();
		jumps[0].add(new int[] {bricks, ladders});
		
		int left = 0, right = size-1;
		
		while (left < right)
		{
			int mid = left+(right-left)/2;
			
			System.out.println(mid);
			
			if (search(mid).size() == 0)
			{
				right = mid-1;
			}
			else 
			{
				left = mid+1;
			}
		}
		
		return left;
    }
	
	private List<int[]> search(int dest)
	{
		if (jumps[dest] != null)
		{
			return jumps[dest];
		}
		
		List<int[]> lastJump = search(dest-1);
		
		if (heights[dest] <= heights[dest-1])
		{
			jumps[dest] = new LinkedList<>(lastJump);
		}
		else
		{
			jumps[dest] = new LinkedList<>();
			int diff = heights[dest] - heights[dest-1];
			
			for (int[] solution : lastJump)
			{
				if (solution[0] >= diff)
	            {
	                jumps[dest].add(new int[] {solution[0] - diff, solution[1]});
	            }
	            
	            if (solution[1] > 0)
	            {
	            	jumps[dest].add(new int[] {solution[0], solution[1] - 1});
	            }
			}
		}
		
		return jumps[dest];
	}
	
	
	
	// Solution 2: TLE
	public int furthestBuilding2(int[] heights, int bricks, int ladders) 
    {
		if (heights == null || heights.length == 0 || (bricks < 0 && ladders < 0))
        {
            return 0;   
        }
        
        int size = heights.length;
        int result = 0;
        
        List<int[]>[] dp = new List[size];
        dp[0] = new LinkedList<>();
        dp[0].add(new int[] {bricks, ladders});
        
        for (int i = 1; i < size; i++)
        {
            if (heights[i] <= heights[i-1])
            {
                dp[i] = dp[i-1];
            }
            else
            {
                dp[i] = new LinkedList<>();
                int diff = heights[i] - heights[i-1];
                
                for (int[] candidate : dp[i-1])
                {
                    if (candidate[0] >= diff)
                    {
                        dp[i].add(new int[] {candidate[0] - diff, candidate[1]});
                    }
                    
                    if (candidate[1] > 0)
                    {
                        dp[i].add(new int[] {candidate[0], candidate[1] - 1});
                    }
                }
            }
            
            if (dp[i].size() == 0)
            {
                break;
            }
            else
            {
                result = i;
            }
        }
        
        return result;
    }
	
	
	
	
	public static void main(String[] args)
	{
		Q1642_Furthest_Building_You_Can_Reach test = new Q1642_Furthest_Building_You_Can_Reach();
		
		int[] heights1 = {4,12,2,7,3,18,20,3,19};
		int bricks1 = 10;
		int ladders1 = 2;
		
		int[] heights2 = {14,3,19,3};
		int bricks2 = 17;
		int ladders2 = 0;
		
		int[] heights3 = {7,5,13};
		int bricks3 = 0;
		int ladders3 = 0;
		

		
		System.out.println(test.furthestBuilding(heights1, bricks1, ladders1));
		// System.out.println(test.furthestBuilding(heights2, bricks2, ladders2));
		// System.out.println(test.furthestBuilding(heights3, bricks3, ladders3));
	}
}
