import java.util.Random;

/***
 * 
 * @author jackie
 * 
 * Given the radius and x-y positions of the center of a circle, write a function randPoint which generates a uniform random point in the circle.

Note:

input and output values are in floating-point.
radius and x-y position of the center of the circle is passed into the class constructor.
a point on the circumference of the circle is considered to be in the circle.
randPoint returns a size 2 array containing x-position and y-position of the random point, in that order.
Example 1:

Input: 
["Solution","randPoint","randPoint","randPoint"]
[[1,0,0],[],[],[]]
Output: [null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]]
Example 2:

Input: 
["Solution","randPoint","randPoint","randPoint"]
[[10,5,-7.5],[],[],[]]
Output: [null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]]
Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has three arguments, the radius, x-position of the center, and y-position of the center of the circle. randPoint has no arguments. Arguments are always wrapped with a list, even if there aren't any.
 */

public class Q478_Generate_Random_Point_in_a_Circle 
{
	private double radius = 0;
    private double x = 0;
    private double y = 0;
    
    public Q478_Generate_Random_Point_in_a_Circle(double radius, double x_center, double y_center) 
    {
        this.radius = radius;
        x = x_center;
        y = y_center;
    }
    
    public double[] randPoint() 
    {
    	// 这里必须用Math.sqrt, 为了均衡距离圆心近和远的点分布，否则离圆心远的点个数会比近的少
    	double new_r = Math.sqrt(Math.random()) * radius;
        double ang = Math.random() * 2 * Math.PI;
        double new_x = x + new_r * Math.cos(ang);
        double new_y = y + new_r * Math.sin(ang);
        return new double[] {new_x, new_y};
    }
}
