import java.util.*;

public class Q000_A_Contest 
{
	public int secondHighest(String s) 
    {
        if (s == null || s.length() <= 1)
        {
            return -1;
        }
        
        int max1 = -1, max2 = -1;
        
        for (char c : s.toCharArray())
        {
            if (Character.isDigit(c))
            {
                int curNum = c - '0';
                
                if (max1 == -1 || curNum >= max1)
                {
                    if (curNum == max1)
                    {
                        continue;
                    }
                    
                    max2 = max1;
                    max1 = curNum;
                }
                else if (max2 == -1 || curNum > max2)
                {
                    max2 = curNum;
                }
            }
        }
        
        return max2;
    }
	
private int[] pool = new int[40001];
    
    public int getMaximumConsecutive(int[] coins) 
    {
        if (coins == null || coins.length == 0)
        {
            return -1;
        }
        
        for (int coin : coins)
        {
            pool[coin]++;
        }
        
        int maxLen = 1;
        int target = 1;
        
        while (true)
        {
            int[] curPool = Arrays.copyOf(pool, 40001);
            
            if (search(curPool, target))
            {
                maxLen++;
                target++;
            }
            else
            {
                break;
            }
        }
        
        return maxLen;
    }
    
    private boolean search(int[] curPool, int target)
    {
        if (target == 0)
        {
            return true;
        }
        
        for (int i = 0; i < curPool.length; i++)
        {
            if (i > target)
            {
                break;
            }
            
            if (curPool[i] > 0)
            {
                curPool[i]--;
                
                if (search(curPool, target-i))
                {
                    return true;
                }
                
                curPool[i]++;
            }
        }
        
        return false;
    }
    
    
    
    private Map<Integer, Integer> memo = new HashMap<>();
    private int[] nums;
    private int size = 0;
    private int[][] gcd;
    
    public int maxScore(int[] nums) 
    {
        if (nums == null || nums.length == 0 || nums.length % 2 != 0)
        {
            return 0;
        }
        
        this.nums = nums;
        size = nums.length;
        Arrays.sort(this.nums);
        initGcd();
        
        int finalStatus = 0;
        for (int i = 0; i < size; i++)
        {
            finalStatus |= (1 << i);
        }
        
        memo.put(finalStatus, 0);
        return backtrack(0, 1);
    }
    
    private int backtrack(int status, int operIndex)
    {
        if (memo.containsKey(status))
        {
            return memo.get(status);
        }
        
        int score = 0;
        
        for (int i = 0; i < size; i++)
        {
            if ( ((1 << i) & status) == 0 )
            {
                for (int j = i+1; j < size; j++)
                {
                    if ( ((1 << j) & status) == 0 )
                    {
                        int nextStatus = status;
                        nextStatus |= (1 << i);
                        nextStatus |= (1 << j);
                        
                        System.out.println(i + ", " + j);
                        
                        int nextScore = backtrack(nextStatus, operIndex+1);
                        score = Math.max(score, operIndex * gcd[i][j] + nextScore);
                    }
                }
            }
        }
        
        memo.put(status, score);
        return score;
    }
    
    private void initGcd()
    {
        gcd = new int[size][size];
        
        for (int i = 0; i < size; i++)
        {
            for (int j = i+1; j < size; j++)
            {
                gcd[i][j] = gcd(nums[i], nums[j]);
            }
        }
    }
    
    private int gcd(int a, int b) 
    {
        return (b == 0) ? a : gcd(b, a % b);
    }
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/

    	int[] nums1 = {1,2};
    	int[] nums2 = {3,4,6,8};
    	int[] nums3 = {1,2,3,4,5,6};
    	
    	// System.out.println(test.maxScore(nums1));
    	System.out.println(test.maxScore(nums2));
    	// System.out.println(test.maxScore(nums3));
    }
}
