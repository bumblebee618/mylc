import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class Trie_Set 
{
	public Trie root = new Trie("", -1);
	
	public void addInformation(String information)
	{
		String[] infoStrs = information.split(",");
		addInfoToTrie(infoStrs);
	}
	
	private void addInfoToTrie(String[] infoStrs)
	{
		Trie node = root;
		
		for (String info : infoStrs)
		{
			info = info.trim();
			
			if (!node.children.containsKey(info))
			{
				node.children.put(info, new Trie(info, node.level+1));
			}
			
			node = node.children.get(info);
		}
	}
	
	
	
	
	
	/****************************** main ******************************/ 
	public static void main(String[] args)
	{
		Trie_Set test = new Trie_Set();
		
		List<String> list1 = new ArrayList<>();
		list1.add("MFST");
		list1.add("Azure");
		list1.add("Networking");
		
		List<String> list2 = new ArrayList<>();
		list2.add("MFST");
		list2.add("Azure");
		list2.add("Computing");
		
		
		List<String> list3 = new ArrayList<>();
		list3.add("Google");
		list3.add("Cloud");
		list3.add("Networking");
		
		List<String> list4 = new ArrayList<>();
		list4.add("Google");
		list4.add("Youtube");
		list4.add("Infra");
		
		List<String> list5 = new ArrayList<>();
		list5.add("Apple");
		list5.add("Iphone");
		list5.add("Infra");
		
		List<String> list6 = new ArrayList<>();
		list6.add("Apple");
		list6.add("Iphone");
		list6.add("App");
		
		List<String> infoList = new LinkedList<>();
		infoList.add("MFST, Azure, Networking, ms_person1");
		infoList.add("MFST, Azure, Networking, ms_person2");
		infoList.add("MFST, Azure, Computing, ms_person3");
		
		infoList.add("Google, Cloud, Networking, gg_person1");
		infoList.add("Google, Cloud, Computing, gg_person2");
		infoList.add("Google, Youtube, Infra, gg_person3");
		
		infoList.add("Apple, Iphone, Hardware, ap_person1");
		infoList.add("Apple, Iphone, App, ap_person2");
		
		
		for (String infos : infoList)
		{
			test.addInformation(infos);
		}
		
		System.out.println(test.root.getString());
	}
}

class Trie
{
	public String node;
	public int level;
	public Map<String, Trie> children;
	
	public Trie(String node, int level)
	{
		this.node = node;
		this.level = level;
		children = new HashMap<>();
	}
	
	public String getString()
	{
		StringBuilder builder = new StringBuilder();
		
		if (level >= 0)
		{
			for (int i = 0; i < level; i++)
			{
				builder.append("  ");
			}
			
			builder.append(node).append("\n");
		}
		
		for (Trie child : children.values())
		{
			builder.append(child.getString());
		}

		return builder.toString();
	}
}
