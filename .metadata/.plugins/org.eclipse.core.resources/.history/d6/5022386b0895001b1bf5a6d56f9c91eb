import java.util.*;




public class Q000_A_Contest 
{
			search(visited, curGcd);
				visited[i] = false;
			}
    	}
    }
    
    private int gcd(int a, int b) 
    {
        return (b == 0) ? a : gcd(b, a % b);
    }
    
    
    ***/
 
     
    public int countDifferentSubsequenceGCDs2(int[] nums) 
    {
    	if (nums == null || nums.length == 0)
    	{
    		return 0;
    	}
    	
    	Set<Integer> result = new HashSet<>();
    	
    	Set<Integer> gcdCache1 = new HashSet<>();
    	List<Integer> list1 = new ArrayList<>();
    	
    	Set<Integer> gcdCache2 = new HashSet<>();
    	List<Integer> list2 = new ArrayList<>();
    	boolean flag = true;
    	
    	for (int num : nums)
    	{
    		if (!result.contains(num))
    		{
    			result.add(num);
    			
    			if (flag)
    			{
    				list1.add(num);
    			}
    			else
    			{
    				list2.add(num);
    			}
    			
    			flag = !flag;
    		}
    	}
    	
    	Collections.sort(list1);
    	for (int i = 0; i < list1.size(); i++)
    	{
    		search(i, list1, gcdCache1, new boolean[list1.size()], list1.get(i));
    	}
    	
    	Collections.sort(list2);
    	for (int i = 0; i < list2.size(); i++)
    	{
    		search(i, list2, gcdCache2, new boolean[list2.size()], list2.get(i));
    	}
    	
    	for (int gcd1 : gcdCache1)
    	{
    		for (int gcd2 : gcdCache2)
    		{
    			result.add(gcd1);
    			result.add(gcd2);
    			result.add(gcd(gcd1, gcd2));
    		}
    	}
    	
    	return result.size();
    }
    
    private void search(int start, List<Integer> list, Set<Integer> gcdCache, boolean[] visited, int prevGcd)
    {
    	for (int i = start; i < list.size(); i++)
    	{
    		if (visited[i])
    		{
    			continue;
    		}
    		
    		int nextNum = list.get(i);
    		int curGcd = gcd(prevGcd, nextNum);
			
			if (curGcd > 1 && !gcdCache.contains(curGcd))
			{
				gcdCache.add(curGcd);
				visited[i] = true;
				search(start+1, list, gcdCache, visited, curGcd);
				visited[i] = false;
			}
    	}
    }
    
    
    
    
    public int countDifferentSubsequenceGCDs(int[] nums) 
    {
    	if (nums == null || nums.length == 0)
    	{
    		return 0;
    	}
    	
        int[] factor = new int[200001];
        
        for (int i = 0; i < nums.length; ++i) 
        {
            for (int j = 1; j * j <= nums[i]; ++j) 
            {
                if (nums[i] % j == 0) 
                {
                    int factor1 = j;
                    int factor2 = nums[i] / j;

                    factor[factor1] = (factor[factor1] == 0) ? nums[i] : gcd(factor[factor1], nums[i]);
                    factor[factor2] = (factor[factor2] == 0) ? nums[i] : gcd(factor[factor2], nums[i]);
                }

            }
        }
        
        int result = 0;
        
        for (int i = 1; i <= 200000; ++i ) 
        {
        	result += (factor[i] == i) ? 1 : 0;
        }
        
        return result;
    }
    
    private int gcd(int a, int b) 
    {
    	if (a == b)
    	{
    		return a;
    	}
    	
        return (b == 0) ? a : gcd(b, a % b);
    }
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	
    	
    	
    }
}
