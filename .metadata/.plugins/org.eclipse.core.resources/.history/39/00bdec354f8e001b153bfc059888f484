/***
 * 
 * @author jackie
 * 
 * We are given two arrays A and B of words.  Each word is a string of lowercase letters.

Now, say that word b is a subset of word a if every letter in b occurs in a, including multiplicity.  For example, "wrr" is a subset of "warrior", but is not a subset of "world".

Now say a word a from A is universal if for every b in B, b is a subset of a. 

Return a list of all universal words in A.  You can return the words in any order.

 

Example 1:

Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","o"]
Output: ["facebook","google","leetcode"]
Example 2:

Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["l","e"]
Output: ["apple","google","leetcode"]
Example 3:

Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["e","oo"]
Output: ["facebook","google"]
Example 4:

Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["lo","eo"]
Output: ["google","leetcode"]
Example 5:

Input: A = ["amazon","apple","facebook","google","leetcode"], B = ["ec","oc","ceo"]
Output: ["facebook","leetcode"]
 

Note:

1 <= A.length, B.length <= 10000
1 <= A[i].length, B[i].length <= 10
A[i] and B[i] consist only of lowercase letters.
All words in A[i] are unique: there isn't i != j with A[i] == A[j].
 */

public class Q916_Word_Subsets 
{
	public List<String> wordSubsets(String[] A, String[] B) 
    {
        List<String> result = new LinkedList<>();
        
        if (A == null || A.length == 0 || B == null || B.length == 0)
        {
            return result;
        }
        
        int[] map = new int[26];
        int[] tmpMap;
        
        for (String b : B)
        {
            tmpMap = new int[26];
            
            for (char c : b.toCharArray())
            {
                tmpMap[c-'a']++;
            }
            
            for (int i = 0; i < 26; i++)
            {
                map[i] = Math.max(map[i], tmpMap[i]);
            }
        }
        
        for (String a : A)
        {
            tmpMap = new int[26];
            
            for (char c : a.toCharArray())
            {
                tmpMap[c-'a']++;
            }
            
            boolean isUniversal = true;
            
            for (int i = 0; i < 26; i++)
            {
                if (map[i] > tmpMap[i])
                {
                    isUniversal = false;
                    break;
                }
            }
            
            if (isUniversal)
            {
                result.add(a);
            }
        }
        
        return result;
    }
}
