import java.util.*;




public class Q000_A_Contest 
{
	public int arraySign(int[] nums) 
    {
        if (nums == null || nums.length == 0)
        {
            return 0;
        }
        
        int result = 1;
        
        for (int num : nums)
        {
            if (num < 0)
            {
                result *= -1;
            }
            else if (num == 0)
            {
                return 0;
            }
        }
        
        return result;
    }
	
	
	public int findTheWinner(int n, int k) 
    {
        if (n <= 0 || k <= 0 || k > n)
        {
            return -1;
        }
        
        int index = 0, count = 0;
        boolean[] removed = new boolean[n];
        
        while (count < n-1)
        {
        	int step = 1;
            
            while (step < k)
            {
                while (removed[index])
                {
                    index = (index+1) % n;
                }
                
                step++;
                index = (index+1) % n;
            }
        	
            while (removed[index])
            {
                index = (index+1) % n;
            }
            
            removed[index] = true;
            count++;
        }
        
        while (removed[index])
        {
            index = (index+1) % n;
        }
        
        return index+1;
    }

	
	
	public int minSideJumps(int[] obstacles) 
    {
        if (obstacles == null || obstacles.length == 0)
        {
            return 0;
        }
        
        int size = obstacles.length;
        int[][] dp = new int[size][3];
        dp[0][0] = dp[0][2] = 1;
        dp[0][1] = 0;
        
        for (int i = 1; i < size; i++)
        {
        	int minJump = Integer.MAX_VALUE;
        	
        	for (int lane = 0; lane < 3; lane++)
        	{
        		dp[i][lane] = obstacles[i]-1 == lane ? Integer.MAX_VALUE : dp[i-1][lane];
        		minJump = Math.min(minJump, dp[i][lane]);
        	}
        	
        	for (int lane = 0; lane < 3; lane++)
        	{
        		if (obstacles[i]-1 == lane)
        		{
        			continue;
        		}
        		
        		dp[i][lane] = dp[i][lane] == minJump ? dp[i][lane] : minJump + 1;
        	}
        }
        
        return Math.min(dp[size-1][0], Math.min(dp[size-1][1], dp[size-1][2]));
    }

	
	
	public static long maxPoints(List<Integer> elements)
	{
		if (elements == null || elements.size() == 0)
		{
			return 0L;
		}
		
		Map<Integer, Long> map = new HashMap<>();
		
		for (int element : elements)
		{
			map.put(element, map.getOrDefault(element, 0L) + element);
		}
		
		long point = 0;
		Set<Integer> visited = new HashSet<>();
		List<Integer> candidates = new LinkedList<>();
		
		for (Map.Entry<Integer, Long> entry : map.entrySet())
		{
			int element = entry.getKey();
			
			if (!map.containsKey(element-1) && !map.containsKey(element+1))
			{
				visited.add(element);
				point += entry.getValue();
			}
			else
			{
				candidates.add(element);
			}
		}
		
		Collections.sort(candidates, (elem1, elem2) -> {
			long diff1 = map.get(elem1) - map.getOrDefault(elem1-1, 0L) - map.getOrDefault(elem1+1, 0L);
			long diff2 = map.get(elem2) - map.getOrDefault(elem2-1, 0L) - map.getOrDefault(elem2+1, 0L);
			
			if (diff1 < diff2)
			{
				return 1;
			}
			else if (diff1 > diff2)
			{
				return -1;
			}
			else 
			{
				return 0;
			}
		});
		
		for (int candidate : candidates)
		{
			if (visited.contains(candidate))
			{
				continue;
			}
			
			visited.add(candidate);
			visited.add(candidate+1);
			visited.add(candidate-1);
			point += map.get(candidate);
		}
		
		return point;
	}
	
	public int deleteAndEarn(int[] nums) 
    {
        if (nums == null || nums.length == 0)
        {
            return 0;
        }
        
        Map<Integer, Integer> map = new HashMap<>();
		
		for (int element : nums)
		{
			map.put(element, map.getOrDefault(element, 0) + element);
		}
        
        int point = 0;
		Set<Integer> visited = new HashSet<>();
		List<Integer> candidates = new LinkedList<>();
		
		for (Map.Entry<Integer, Integer> entry : map.entrySet())
		{
			int element = entry.getKey();
			
			if (!map.containsKey(element-1) && !map.containsKey(element+1))
			{
				visited.add(element);
				point += entry.getValue();
			}
			else
			{
				candidates.add(element);
			}
		}
        
        Collections.sort(candidates, (elem1, elem2) -> (map.get(elem2) - map.getOrDefault(elem2-1, 0) - map.getOrDefault(elem2+1, 0)) - (map.get(elem1) - map.getOrDefault(elem1-1, 0) - map.getOrDefault(elem1+1, 0)));
		
		for (int candidate : candidates)
		{
			if (visited.contains(candidate))
			{
				continue;
			}
			
			visited.add(candidate);
			visited.add(candidate+1);
			visited.add(candidate-1);
			point += map.get(candidate);
			System.out.print(candidate + ", ");
		}
		
		return point;
    }
	
	public int minOperations(int[] nums) 
    {
        if (nums == null || nums.length <= 1)
        {
            return 0;
        }
        
        int result = 0;
        int needed = nums[0]+1;
        
        for (int i = 1; i < nums.length; i++)
        {
            if (nums[i] < needed)
            {
                result += needed - nums[i];
                needed++;
            }
            else
            {
                needed = nums[i]+1;
            }
        }
        
        return result;
    }
    
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
 
    	
    	List<Integer> elements1 = new LinkedList<>();
    	elements1.add(5);
    	elements1.add(6);
    	elements1.add(6);
    	elements1.add(4);
    	elements1.add(11);
    	
    	System.out.println(maxPoints(elements1));
    	
    	
    	
    	List<Integer> elements2 = new LinkedList<>();
    	elements2.add(3);
    	elements2.add(4);
    	elements2.add(2);
    	
    	System.out.println(maxPoints(elements2));
    	
    	
    	
    	List<Integer> elements3 = new LinkedList<>();
    	elements3.add(3);
    	elements3.add(3);
    	elements3.add(3);
    	
    	System.out.println(maxPoints(elements3));
    	
    	
    	int[] nums = {8,7,3,8,1,4,10,10,10,2};
    	System.out.println(test.deleteAndEarn(nums));
    	
    	
    	
    	int[] nums1 = {1,1,1};
    	System.out.println(test.minOperations(nums1));
    }
}
