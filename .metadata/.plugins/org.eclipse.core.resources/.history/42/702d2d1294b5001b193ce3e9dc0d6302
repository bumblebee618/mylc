import java.util.*;





public class Q000_A_Contest 
{	
	public String sortSentence(String s) 
    {
        if (s == null || s.length() == 0)
        {
            return s;
        }
        
        String[] strs = s.split(" ");
        Arrays.sort(strs, (a, b) -> a.charAt(a.length()-1) - b.charAt(b.length()-1));
        StringBuilder builder = new StringBuilder();
        
        for (String str : strs)
        {
        	builder.append(str.substring(0, str.length()-1)).append(" ");
        }
        
        return builder.substring(0, builder.length()-1);
    }
	
	
	public int[] memLeak(int memory1, int memory2) 
    {
		if (memory1 < 0 || memory2 < 0)
		{
			return new int[] {0, 0, 0};
		}
		else if (memory1 == 0 && memory2 == 0)
		{
			return new int[] {1, 0, 0};
		}
		
		
		/***
		int max = Math.max(memory1, memory2);
		int min = Math.min(memory1, memory2);
		int diff =  max - min;
		int seconds = binarySearch(diff, diff, 1);
		
		if (memory1 > memory2)
		{
			memory1 -= caculateMemory(1, seconds, 1);
		}
		else if (memory1 < memory2)
		{
			memory2 -= caculateMemory(1, seconds, 1);
		}
		***/
		
		int seconds = 0;
		int[] memories = new int[] {memory1, memory2};
		Queue<Integer> heap = new PriorityQueue<>((a, b) -> (memories[b] != memories[a] ? memories[b] - memories[a] : a - b));
		
		if (memory1 > 0)
		{
			heap.offer(0);
		}
		
		if (memory2 > 0)
		{
			heap.offer(1);
		}
		
		while (!heap.isEmpty())
		{
			int index = heap.poll();
			
			if (memories[index] < seconds)
			{
				break;
			}
			else
			{
				memories[index] -= seconds;
				heap.offer(index);
			}
			
			seconds++;
		}
		
		return new int[] {seconds, memories[0], memories[1]};
    }
	
	
	
	
	public char[][] rotateTheBox(char[][] box) 
	{
		if (box == null || box.length == 0 || box[0].length == 0)
		{
			return box;
		}
		
		int row = box.length, col = box[0].length;
		
		for (int i = 0; i < row; i++)
		{
			int lastStopPos = col;
			
			for (int j = col-1; j >= 0; j--)
			{
				if (box[i][j] == '*')
				{
					lastStopPos = j;
				}
				else if (box[i][j] == '#')
				{
					box[i][j] = '.';
					box[i][lastStopPos-1] = '#';
					lastStopPos = lastStopPos-1;
				}
			}
		}
		
		char[][] result = new char[col][row];
		
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				result[j][i] = box[i][j];
			}
		}
		
		for (int i = 0; i < row; i++)
		{
			int left = 0, right = result[0].length-1;
			
			while (left < right)
			{
				char tmp = result[i][left];
				result[i][left] = result[i][right];
				result[i][right] = tmp;
				left++;
				right--;
			}
		}
		
		
		
		print(box);
		print(result);
		
		return result;
    }
  
	
	private void print(char[][] matrix)
	{
		for (int i = 0; i < matrix.length; i++)
		{
			for (int j = 0; j < matrix[0].length; j++)
			{
				System.out.print(matrix[i][j] + ", ");
			}
			
			System.out.println();
		}
		
		System.out.println();
	}
    
    
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
 
    	// int memory1 = 8, memory2 = (1 << 31) - 1;
    	
    	// int memory1 = 8, memory2 = (1 << 31) - 1;
    	
    	char[][] box1 = {{'#', '.', '#'}};
    	char[][] box2 = {
    			{'#', '.', '*', '.'},
    			{'#', '#', '*', '.'}
    			};
    	char[][] box3 = {
    			{'#', '#', '*', '.', '*', '.'},
    			{'#', '#', '#', '*', '.', '.'},
    			{'#', '#', '#', '.', '#', '.'}
    			};
    	
    	test.rotateTheBox(box1);
    	
    	test.rotateTheBox(box2);
    }
}
