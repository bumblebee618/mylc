
public class Q000_A_Contest 
{	  
	public long gridGame(int[][] grid) {
        int row = grid.length, col = grid[0].length;
        int[][] dp = new int[row][col];
        int sum = 0;
        
        print(grid);
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
            	sum += grid[i][j];
            	
                if (i == 0 && j == 0) {
                    dp[i][j] =grid[i][j];
                    grid[i][j] = 0;
                    continue;
                }
                
                int left = (j > 0) ? dp[i][j-1] : -1;
                int up = (i > 0) ? dp[i-1][j] : -1;
                
                if (left > up) {
                	dp[i][j] = grid[i][j] + left;
                	grid[i][j-1] = 0;
                } else {
                	dp[i][j] = grid[i][j] + up;
                	grid[i-1][j] = 0;
                }
            }
        }
        
        print(grid);
        
        return sum - dp[row-1][col-1];
	}
	
	
	
	
	public long gridGame2(int[][] grid) {
        int row = grid.length, col = grid[0].length;
        Node[][] dp = new Node[row][col];
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = new Node(grid[i][j], -1, -1);
                    continue;
                }
                
                int left = (j > 0) ? dp[i][j-1].point : -1;
                int up = (i > 0) ? dp[i-1][j].point : -1;
                
                dp[i][j] = (left > up) 
                    ? new Node(grid[i][j] + left, i, j-1) 
                    : new Node(grid[i][j] + up, i-1, j);
            }
        }
        
        System.out.println(dp[row-1][col-1].point);
        print(grid);
        
        int startX = row-1;
        int startY = col-1;
        
        while (startX != -1 && startY != -1) {
            grid[startX][startY] = 0;
            int nextX = dp[startX][startY].fromX;
            int nextY = dp[startX][startY].fromY;
            startX = nextX;
            startY = nextY;
        }
        
        print(grid);
        
        int[][] result = new int[row][col];
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (i == 0 && j == 0) {
                    result[i][j] = grid[i][j];
                    continue;
                }
                
                int left = (j > 0) ? result[i][j-1] : -1;
                int up = (i > 0) ? result[i-1][j] : -1;
                result[i][j] = (left > up) ? grid[i][j] + left : grid[i][j] + up;
            }
        }
        
        return result[row-1][col-1];
    }
    
    class Node {
        public int point;
        public int fromX;
        public int fromY;
        
        public Node(int p, int x, int y) {
            point = p;
            fromX = x;
            fromY = y;
        }
    }
	
	
    
    private void print(int[][] grid) {
    	for (int i = 0; i < grid.length; i++) {
    		for (int j = 0; j < grid[0].length; j++) {
    			System.out.print(grid[i][j] + ", ");
    		}
    		
    		System.out.println();
    	}
    }
    
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	int[][] grid1 = {{20,3,20,17,2,12,15,17,4,15},{20,10,13,14,15,5,2,3,14,3}};
    	
    	int[][] grid2 = {{1,3,1,15},{1,3,3,1}};
    	
    	System.out.println(test.gridGame(grid1));
    }
}
