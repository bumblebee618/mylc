import java.util.*;

/***
 * 
 * @author jackie
 * 
 * Given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].

The rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:

The rank is an integer starting from 1.
If two elements p and q are in the same row or column, then:
If p < q then rank(p) < rank(q)
If p == q then rank(p) == rank(q)
If p > q then rank(p) > rank(q)
The rank should be as small as possible.
It is guaranteed that answer is unique under the given rules.

 

Example 1:


Input: matrix = [[1,2],[3,4]]
Output: [[1,2],[2,3]]
Explanation:
The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.
The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.
The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.
The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.
Example 2:


Input: matrix = [[7,7],[7,7]]
Output: [[1,1],[1,1]]
Example 3:


Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]
Example 4:


Input: matrix = [[7,3,6],[1,4,5],[9,8,2]]
Output: [[5,1,4],[1,2,3],[6,3,1]]
 */
public class Q1632_Rank_Transform_of_a_Matrix {
	public int[][] matrixRankTransform(int[][] matrix) {
        int row = matrix.length, col = matrix[0].length;
        int[][] result = new int[row][col];
        
        Map<Integer, int[]> rowStatus = new HashMap<>();
        Map<Integer, int[]> colStatus = new HashMap<>();
        Queue<int[]> heap = new PriorityQueue<>((a, b) -> matrix[a[0]][a[1]] - matrix[b[0]][b[1]]);
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                heap.offer(new int[] {i, j});
            }
        }
        
        while (!heap.isEmpty()) {
            int[] pos = heap.poll();
            int curValue = matrix[pos[0]][pos[1]];
            
            int[] lastRowStatus = rowStatus.getOrDefault(pos[0], new int[3]);
            int candidate1 = lastRowStatus[0] == 0 
                ? 1 
                : (curValue == matrix[lastRowStatus[1]][lastRowStatus[2]]) ? lastRowStatus[0] : lastRowStatus[0]+1; 
            
            int[] lastColStatus = colStatus.getOrDefault(pos[1], new int[2]);
            int candidate2 = lastColStatus[0] == 0 
                ? 1 
                : (curValue == matrix[lastColStatus[1]][lastColStatus[2]]) ? lastColStatus[0] : lastColStatus[0]+1; 
                
                
                /**
                
                if (curValue == 39) {
                	System.out.println(pos[0] + ", " + pos[1]);
                	System.out.println(lastRowStatus[1] + ", rank = " + lastRowStatus[0]);
                	System.out.println(lastColStatus[1] + ", rank = " + lastColStatus[0]);
                }
                **/
                
                
            
            int curRank = Math.max(candidate1, candidate2);
            result[pos[0]][pos[1]] = curRank;
            
            if (curValue == matrix[lastRowStatus[1]][lastRowStatus[2]]) {
            	result[lastRowStatus[1]][lastRowStatus[2]] = curRank;
            }
            
            if (curValue == matrix[lastColStatus[1]][lastColStatus[2]]) {
            	result[lastColStatus[1]][lastColStatus[2]] = curRank;
            }
            
            rowStatus.put(pos[0], new int[] {curRank, curValue});
            colStatus.put(pos[1], new int[] {curRank, curValue});
        }
        
        return result;
    }
	
	
	
	public static void main(String[] args) {
		int[][] matrix = {
				{-2,-35,-32,-5,-30,33,-12},
				{7,2,-43,4,-49,14,17},
				{4,23,-6,-15,-24,-17,6},
				{-47,20,39,-26,9,-44,39},
				{-50,-47,44,43,-22,33,-36},
				{-13,34,49,24,23,-2,-35},
				{-40,43,-22,-19,-4,23,-18}
			};
		
		Q1632_Rank_Transform_of_a_Matrix test = new Q1632_Rank_Transform_of_a_Matrix();
		test.matrixRankTransform(matrix);
	}
}
