
public class Q000_Maximum_Score_from_Performing_Multiplication_Operations 
{
	public int maximumScore(int[] nums, int[] multipliers) 
    {
        if (nums == null || nums.length == 0 
            || multipliers == null || multipliers.length == 0
            || nums.length < multipliers.length)
        {
            return 0;
        }
        
        int n = nums.length, m = multipliers.length;
        int[][] score = new int[n][n];
        int diff = n-m;
        
        for (int length = 1; length <= n; length++)
        {
            for (int start = 0; start + length <= n; start++)
            {
                int end = start + length - 1;
                
               // System.out.print(start + "," + end);
                
                int multiplier = (length <= diff) ? 1 : multipliers[m - (length-diff)];
                int rightPart = (start == end) ? 0 : score[start+1][end];
                int leftPart = (start == end) ? 0 : score[start][end-1];
                score[start][end] = Math.max(
                		multiplier * nums[start] + rightPart, 
                		multiplier * nums[end] + leftPart);
            }
        }
        
        return score[0][n-1];
    }
	
	
	
	
	public static void main(String[] args)
	{
		Q000_Maximum_Score_from_Performing_Multiplication_Operations test = new Q000_Maximum_Score_from_Performing_Multiplication_Operations();
		int[] nums1 = {1,2,3};
		int[] multipliers1 = {3,2,1};
		
		System.out.println(test.maximumScore(nums1, multipliers1));
	}
}
