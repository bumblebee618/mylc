import java.math.BigDecimal;
import java.util.*;






public class Q000_A_Contest 
{	  
	public int smallestChair(int[][] times, int targetFriend) {
		List<int[]> list = new ArrayList<>();
		
		for (int[] time : times)
		{
			if (time[0] < times[targetFriend][0])
			{
				list.add(time);
			}
		}
		
		Collections.sort(list, (a, b) -> a[0] - b[0]);
		Queue<int[]> heap = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
		Queue<Integer> chairs = new PriorityQueue<>();
		int chairId = 0;
		
		for (int i = 0; i < list.size(); i++)
		{
			int[] curTime = list.get(i);
			
			System.out.println("input: " + curTime[0] + ", " + curTime[1]);
			
			while (!heap.isEmpty() && heap.peek()[0] <= curTime[0])
			{
				int[] node = heap.poll();
				chairs.add(node[1]);
				
				System.out.println("leave: " + node[0] + ", chair " + node[1]);
			}
			
			if (chairs.isEmpty())
			{
				System.out.println("take from index: " + curTime[1] + ", chair " + chairId);
				heap.offer(new int[] {curTime[1], chairId++});
			}
			else
			{
				System.out.println("take from heap: " + curTime[1] + ", chair " + chairs.peek());
				heap.offer(new int[] {curTime[1], chairs.poll()});
			}
		}
		
		while (!heap.isEmpty() && heap.peek()[0] <= times[targetFriend][0])
		{
			chairs.add(heap.poll()[1]);
		}
		
		return chairs.isEmpty() ? chairId : chairs.peek();
    }
	
	
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	int[][] times1 = {{1,4},{2,3},{4,6}};
    	int targetFriend1 = 1;
    	
    	int[][] times2 = {{3,10},{1,5},{2,6}};
    	int targetFriend2 = 0;
    	
    	int[][] times3 = {{3,10},{1,2},{2,6},{4,7}};
    	int targetFriend3 = 0;
    	
    	int[][] times4 = {
    			{33889,98676},{80071,89737},{44118,52565},{52992,84310},
    			{78492,88209},{21695,67063},{84622,95452},{98048,98856},
    			{98411,99433},{55333,56548},{65375,88566},{55011,62821},
    			{48548,48656},{87396,94825},{55273,81868},{75629,91467}};
    	int targetFriend4 = 6;
    	
    	/**
    	System.out.println(test.smallestChair(times1, targetFriend1));
    	System.out.println(test.smallestChair(times2, targetFriend2));
    	System.out.println(test.smallestChair(times3, targetFriend3));
    	**/
    	
    	System.out.println(test.smallestChair(times4, targetFriend4));
    }
}
