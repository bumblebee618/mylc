import java.math.BigDecimal;
import java.util.*;

import javax.management.relation.Role;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;







public class Q000_A_Contest 
{	  
	public int minTimeToType(String word) {
        char[] letters = word.toCharArray();
        int result = 0;
        char curPos = 'a';
        
        for (char letter : letters) {
        	int clockwise = (int) (letter - curPos) >= 0 ? (int) (letter - curPos) : (int) (letter - curPos) + 26;
        	int counterclockwise = (int) (curPos - letter) >= 0 ? (int) (curPos - letter) : (int) (curPos - letter) + 26;
            int distance = Math.min(clockwise, counterclockwise); 
            result += distance+1;
            curPos = letter;
        }
        
        return result;
    }
	

    
    public long maxMatrixSum(int[][] matrix) {
        int n = matrix.length;
        long sum = 0;
        Integer minPositive = null;
        Integer maxNegative = null;
        int negativeCount = 0;
        boolean hasZero = false;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
            	sum += matrix[i][j] > 0 ? matrix[i][j] : -matrix[i][j];
            	
                if (matrix[i][j] > 0) {
                	minPositive = Math.min(minPositive, matrix[i][j]);
                } else if (matrix[i][j] < 0) {
                	maxNegative = Math.max(maxNegative, matrix[i][j]);
                	negativeCount++;
                } else {
					hasZero = true;
				}
            }
        }
        
        if (!hasZero && negativeCount % 2 > 0) {
        	if (minPositive != null && maxNegative != null) {
        		sum -= Math.min(minPositive, -maxNegative);
        	} else {
        		sum += maxNegative;
        	}
        }
        
        return sum;
    }
    
    
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	int[][] matrix1 = {{1,-1},{-1,1}};
    	int[][] matrix2 = {{1,2,3},{-1,-2,-3},{1,2,3}};
    	int[][] matrix3 = {{2,9,3},{5,4,-4},{1,7,1}};
  
    	System.out.println(test.maxMatrixSum(matrix3));
    }
}
