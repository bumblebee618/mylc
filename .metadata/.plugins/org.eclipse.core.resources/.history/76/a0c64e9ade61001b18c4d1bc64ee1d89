import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
/********
 * 
Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0. 
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, row / row = ? . 
return [6.0, 0.5, -1.0, 1.0, -1.0 ].

The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:

equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["row", "row"] ]. 
The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.

 * 
 * */

public class Q399_Evaluate_Division {
	private Map<String, Set<String>> graph = new HashMap<>();
	private Map<String, Double> resultMap = new HashMap<>();
	
	public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) 
	{
        if (equations == null || equations.size() == 0 
        	|| values == null || values.length == 0
        	|| queries == null || queries.size() == 0)
        {
            return new double[0];
        }
        else if (equations.size() != values.length)
        {
            return new double[0];
        }
        
        double[] result = new double[queries.size()];
        Set<String> visited = new HashSet<>();
        
        // build graph;
        for (int i = 0; i < values.length; i++)
        {
            graph.computeIfAbsent(equations.get(i).get(0), x -> new HashSet<>()).add(equations.get(i).get(1));
            graph.computeIfAbsent(equations.get(i).get(1), x -> new HashSet<>()).add(equations.get(i).get(0));
            resultMap.put(equations.get(i).get(0) + "/" + equations.get(i).get(1), values[i]);
            resultMap.put(equations.get(i).get(1) + "/" + equations.get(i).get(0), 1.0 / values[i]);
        }
        
        // dfs
        for (int i = 0; i < queries.size(); i++)
        {
            result[i] = dfs(queries.get(i).get(0), queries.get(i).get(1), 1, visited);
        }
        
        return result;
    }
    
    private double dfs(String startNode, String endNode, double sum, Set<String> visited)
    {
        if (!graph.containsKey(startNode))
        {
            return -1.0;
        }
        else if (startNode.equals(endNode))
        {
            return 1.0;
        }
        else if (resultMap.containsKey(startNode + "/" + endNode))
        {
            return sum * resultMap.get(startNode + "/" + endNode);
        }
        
        visited.add(startNode);
        double result = -1.0;
        
        for (String nextNode : graph.get(startNode))
        {
            if (!visited.contains(nextNode))
            {
                if (resultMap.containsKey(startNode + "/" + nextNode))
                {
                    result = dfs(nextNode, endNode, sum * resultMap.get(startNode + "/" + nextNode), visited);
                    
                    if (result != -1.0)
                    {
                        return result;
                    }
                }
            }
        }
        
        visited.remove(startNode);
        return result;
    }
	

    
    
    
    
    
    
    
    
    
	// solution 2:
    public double[] calcEquation(String[][] equations, double[] values, String[][] queries) 
    {
        if (equations == null || values == null || queries == null 
        	|| queries.length == 0 || equations.length != values.length){
        	return new double[0];
        }
        
        int len = equations.length;
        double[] result = new double[queries.length];
        
        // build graph
        for(int i = 0; i < len; i++){
        	if(!graph.containsKey(equations[i][0])){
        		graph.put(equations[i][0], new HashSet<String>());
        	}
        	graph.get(equations[i][0]).add(equations[i][1]);
        	
        	if(!graph.containsKey(equations[i][1])){
        		graph.put(equations[i][1], new HashSet<String>());
        	}
        	graph.get(equations[i][1]).add(equations[i][0]);
        	
        	resultMap.put(equations[i][0] + "/" + equations[i][1], values[i]);
        	resultMap.put(equations[i][1] + "/" + equations[i][0], 1.0 / values[i]);
        }
        
        for(int i = 0; i < queries.length; i++){
        	result[i] = DFS(queries[i][0], queries[i][1], 1, new HashSet<String>());
        }
        
        return result;
    }
    
    public double DFS(String start, String end, double sum, Set<String> visited){		
		if(!graph.containsKey(start)){
			return -1.0;
		} else if(start.equals(end)){
			return 1.0;
		} else if(resultMap.containsKey(start + "/" + end)){
			return sum * resultMap.get(start + "/" + end);
		} 
 		
		visited.add(start);
		double result = -1.0;		
		
		for(String next : graph.get(start)){			
			if(!visited.contains(next)){			
				if(resultMap.containsKey(start + "/" + next)){
					result = DFS(next, end, sum * resultMap.get(start + "/" + next), visited);
				} 
				
				if(result != -1.0){
					return result;
				}
			}
		}
		
		visited.remove(start);
		return result;
	}
}
