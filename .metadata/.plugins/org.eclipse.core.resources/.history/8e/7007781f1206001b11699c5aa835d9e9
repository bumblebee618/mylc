import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;

public class ElevatorManager {
	private Queue<Integer> upRequests;
	private Queue<Integer> pendingUpRequests;
	
	private Queue<Integer> downRequests;
	private Queue<Integer> pendingDownRequests;
	
	private Elevator elevator;
	private boolean isUp;
	
	public ElevatorManager()
	{
		upRequests = new PriorityQueue<Integer>(1, (a, b) -> a - b);
		pendingUpRequests = new PriorityQueue<Integer>(1, (a, b) -> a - b);
		
		downRequests = new PriorityQueue<Integer>(1, (a, b) -> b - a);
		pendingDownRequests = new PriorityQueue<Integer>(1, (a, b) -> b - a);
		
		elevator = ElevatorFactory.getElevator();
		isUp = true;
	}
	
	public void pressButton(int fromFloor, int toFloor)
	{
		addRequest(new Request(fromFloor, toFloor));
	}
	
	private void processRequest()
	{
		while (true)
		{
			while (!upRequests.isEmpty())
			{
				
			}
			
			while (!downRequests.isEmpty())
			{
				
			}
		}
	}
	
	private void addRequest(Request request)
	{
		if (request.isUp())
		{
			if (request.getFromFloor() > elevator.getCurrentFloor())
			{
				upRequests.add(request.getFromFloor());
				upRequests.add(request.getToFloor());
			}
			else
			{
				pendingUpRequests.add(request.getFromFloor());
				pendingUpRequests.add(request.getToFloor());
			}
		}
		else
		{
			if (request.getFromFloor() < elevator.getCurrentFloor())
			{
				downRequests.add(request.getFromFloor());
				downRequests.add(request.getToFloor());
			}
			else
			{
				pendingDownRequests.add(request.getFromFloor());
				pendingDownRequests.add(request.getToFloor());
			}
		}
	}
	
	private void removeRequest(Request request)
	{
		queue.remove(request);
	}
	
	private Request getNextRequest()
	{
		Request shortestReq = null;
		int shortest = Integer.MAX_VALUE;
		int curFloor = ElevatorFactory.getElevator().getCurrentFloor();
		
		for (Request request : queue) 
		{
			if (request.isUp() != isUp)
			{
				continue;
			}
			
			int distance = curFloor - request.getFromFloor();
			
			if ()
			{
				
			}
			
			int distance = Math.abs(curFloor - request.getToFloor( ));
			
		        if (distance < shortest) {
		            shortest = distance;
		            shortestReq = item;
		}
		}
		return shortestReq;

	}
}
