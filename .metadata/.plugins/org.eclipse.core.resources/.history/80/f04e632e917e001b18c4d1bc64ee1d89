import java.util.*;

public class Q000_A_Contest 
{
	public int nearestValidPoint(int x, int y, int[][] points) 
	{
		if (points == null || points.length == 0 || points[0].length == 0)
		{
			return 0;
		}
        
        int minDist = Integer.MAX_VALUE;
        int index = -1;
        
        for (int i = 0; i < points.length; i++)
        {
            if (points[i][0] == x || points[i][1] == y)
            {
                int dist = Math.abs(x - points[i][0]) + Math.abs(y - points[i][1]);
                
                if (dist < minDist)
                {
                    minDist = dist;
                    index = i;
                }
            }
        }
        
        return index;
    }
    
	public boolean checkPowersOfThree2(int n) 
    {
        if (n < 1)
        {
            return false;
        }
        
        boolean[] dp = new boolean[n+1];
        dp[0] = true;
        int y = 1;
        
        while (y <= n)
        {
            for (int i = n; i >= y; i--)
            {
                dp[i] |= dp[i-y];
            }
            
            if (dp[n])
            {
            	break;
            }
            
            y *= 3;
        }
        
        return dp[n];
    }
	
	private Map<String, Boolean> memo = new HashMap<>();
    private Map<Integer, Integer> powerMap = new HashMap<>();
    private int target = 0;
    
    public boolean checkPowersOfThree(int n) 
    {
        if (n < 1)
        {
            return false;
        }
        
        int maxPower = getMaxPower(n);
        char[] status = new char[maxPower+1];
        target = n;
        Arrays.fill(status, '0');
        return search(status, 0);
    }
    
    private boolean search(char[] status, long curSum)
    {
        if (curSum == (long) target)
        {
            return true;
        }
        
        String key = new String(status);
        
        if (memo.containsKey(key))
        {
            return memo.get(key);
        }
        
        for (int i = 0; i < status.length; i++)
        {
            if (status[i] == '0')
            {
                status[i] = '1';
                
                if (curSum+powerMap.get(i) > target)
                {
                	break;
                }
                
                if (search(status, curSum+powerMap.get(i)))
                {
                    memo.put(key, true);
                    break;
                }
                
                status[i] = '0';
            }
        }
        
        if (!memo.containsKey(key))
        {
            memo.put(key, false);
        }
        
        return memo.get(key);
    }
    
    private int getMaxPower(int n)
    {
        int count = 0;
        long y = 1;
        powerMap.put(0, (int) y);
        
        while (y <= (long) n)
        {
            y *= 3;
            count++;
            powerMap.put(count, (int) y);
            
            // System.out.println(count + ", " + y);
        }
        
        return count-1;
    }
	
	
	
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	int[][] points = {{1,2},{3,1},{2,4},{2,3},{4,4}};
    	int x = 3, y = 4;
    	
    	// System.out.println(test.nearestValidPoint(x, y, points));
    	
    	int n1 = 12;
    	int n2 = 91;
    	int n3 = 21;
    	
    	System.out.println(test.checkPowersOfThree(n1));
    	// System.out.println(test.checkPowersOfThree(n2));
    	// System.out.println(test.checkPowersOfThree(n3));
    	// System.out.println(test.checkPowersOfThree(8360385));
    }
    
}
