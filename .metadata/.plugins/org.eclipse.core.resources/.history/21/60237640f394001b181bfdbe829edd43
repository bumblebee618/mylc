import java.util.*;



public class Q000_A_Contest 
{
	/***
	private Map<String, Integer> memo;
	
	public int maxHappyGroups(int batchSize, int[] groups) 
	{
		if (batchSize <= 0 || groups == null || groups.length == 0)
		{
			return 0;
		}
		
		memo = new HashMap<>();
        int[] countMap = new int[batchSize];
        int result = 0, groupSize = 0;
        
        for (int i = 0; i < groups.length; i++)
        {
            int newGroup = groups[i] % batchSize;
            countMap[groups[i] % batchSize]++;
            groupSize += newGroup > 0 ? 1 : 0;
        }
        
        result += countMap[0];
        result += search(0, countMap, groupSize);
        return result;
    }
        
        
    private int search(int sumLeft, int[] countMap, int groupLeft)
    {
        if (groupLeft == 0) 
        {
        	return 0;
        }
        
        String key = Arrays.toString(countMap);
        
        if (memo.containsKey(key)) 
        {
        	return memo.get(key);
        }
        
        int result = 0;
        
        if (sumLeft == 0)
        {
            result++;
            sumLeft = countMap.length;
        }
        
        int count = 0;
        
        for (int num = 1; num < countMap.length; num++)
        {
            if (countMap[num] == 0) 
            {
            	continue;
            }
            
            countMap[num]--;
            int curGroupLeft = groupLeft - 1;
            int nextSumLeft = sumLeft - num;

            if (nextSumLeft < 0) 
            {
            	nextSumLeft += countMap.length;
            }
            
            count = Math.max(count, search(nextSumLeft, countMap, curGroupLeft));
            countMap[num]++;
        }
        
        result += count;
        memo.put(key, result);
        return result;
    }
    
    
    ***/
	
	
	private Map<String, Integer> memo;
	
	public int maxHappyGroups(int batchSize, int[] groups) 
	{	
		if (batchSize <= 0 || groups == null || groups.length == 0)
		{
			return 0;
		}
		
		memo = new HashMap<>();
		
        int countMap[] = new int[batchSize+1];
        int result = 0;
        
        for (int group : groups) 
        {
            countMap[group % batchSize]++;
        }
        
        result += countMap[0];
        countMap[0] = 0;
        
        for (int num = 1; num < batchSize / 2; num++) 
        {
            int min = Math.min(countMap[num], countMap[batchSize-num]);
            countMap[num] -= min;
            countMap[batchSize - num] -= min;
            result += min;
        }
        
        result += search(countMap, 0);
        return result;
    }
    
    private int search(int countMap[], int sumLeft) 
    {
        int n = countMap.length-1;
        String key = Arrays.toString(countMap);
        
        if (memo.containsKey(key)) 
        {
        	return memo.get(key);
        }
        
        int result = 0;
        
        // greedy and short cut when we can finish the current round
        if (sumLeft > 0 && countMap[n-sumLeft] > 0) 
        {
            countMap[n-sumLeft]--;
            result = search(countMap, 0);
            countMap[n-sumLeft]++;
        } 
        else 
        {
            for (int i = 1; i < countMap.length; i++) 
            {
                if (countMap[i] > 0) 
                {
                    countMap[i]--;
                    result = Math.max(result, search(countMap, (sumLeft+i) % n) + (sumLeft == 0 ? 1 : 0));
                    countMap[i]++;
                }
            }
        }
        
        memo.put(key, result);
        return result;
    }
	
	
	
    public String truncateSentence(String s, int k) 
    {
        if (s == null || s.length() == 0 || k <= 0)
        {
            return "";
        }
        
        s = s.trim();
        String[] words = s.split(" ");
        StringBuilder builder = new StringBuilder();
        
        for (int i = 0; i < words.length && i < k; i++)
        {
            builder.append(words[i]).append(" ");
        }
        
        return builder.substring(0, builder.length()-1);
    }
	
    
    public int[] findingUsersActiveMinutes(int[][] logs, int k) 
    {
        if (logs == null || logs.length == 0 || logs[0].length != 2 || k <= 0)
        {
            return new int[0];
        }
        
        int[] result = new int[k];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        
        for (int[] log : logs)
        {
            map.computeIfAbsent(log[0], x -> new HashSet<>()).add(log[1]);
        }
        
        for (Map.Entry<Integer, Set<Integer>> entry : map.entrySet())
        {
        	int count = entry.getValue().size();
        	result[count-1]++;
        }
        
        return result;
    }
    
    
    
    public int minAbsoluteSumDiff(int[] nums1, int[] nums2) 
    {
        if (nums1 == null || nums1.length == 0 || nums2 == null || nums2.length != nums1.length)
        {
            return 0;
        }
        
        long sum = 0;
        int size = nums1.length;
        long maxChange = 0;
        TreeSet<Integer> treeSet = new TreeSet<>();
        int mod = 1_000_000_007;
        
        for (int i = 0; i < size; i++)
        {
        	treeSet.add(nums1[i]);
            sum += Math.abs(nums1[i] - nums2[i]);
        }
        
        for (int i = 0; i < size; i++)
        {
        	if (nums1[1] == nums2[i])
        	{
        		continue;
        	}
            
            Integer h = treeSet.ceiling(nums2[i]);
            Integer l = treeSet.floor(nums2[i]);
            
            long curDiff = Math.abs(nums1[i] - nums2[i]);
            long newDiff = curDiff;
            
            if (h != null)
            {
            	newDiff = Math.min(newDiff, Math.abs(h - nums2[i]));
            }
            
            if (l != null)
            {
            	newDiff = Math.min(newDiff, Math.abs(l - nums2[i]));
            }
            
            maxChange = Math.max(maxChange, curDiff - newDiff);
        }
        
        return (int) ((sum - maxChange) % mod);
    }
	
    
    
    public static void print(int[] result)
    {
    	for (int num : result)
    	{
    		System.out.print(num + ", ");
    	}
    	
    	System.out.println();
    }
	
    public static void main(String[] args)
    {
    	Q000_A_Contest test = new Q000_A_Contest();
    	
    	/****************************************************/
    	
    	
    	
    	int[] result1 = test.findingUsersActiveMinutes(logs1, k1);
    	print(result1);
    	
    	int[] result2 = test.findingUsersActiveMinutes(logs2, k2);
    	print(result2);
    	
    	
    	
    	
    	int[] groups1 = {1,2,3,4,5,6};
    	int batchSize1 = 3;
    	
    	int[] groups2 = {1,3,2,5,2,2,1,6};
    	int batchSize2 = 4;
    	
    	int[] groups3 = {369821235,311690424,74641571,179819879,171396603,274036220};
    	int batchSize3 = 3;
    	
    	int[] groups4 = {844438225,657615828,355556135,491931377,644089602,30037905,863899906,246536524,682224520};
    	int batchSize4 = 3;
    	
    	int[] groups5 = {369205928,981877451,947462486,899465743,737778942,573732515,520226542,824581298,571789442,251943251,70139785,778962318,43379662,90924712,142825931,182207697,178834435,978165687};
    	int batchSize5 = 6;
    	
    	int[] groups6 = {287773481,815094798,356732984,644469322,543193620,903158817,274116865,395252956,363839119,365378492,122313059,312690039,252532812};
    	int batchSize6 = 7;
    	
    	/***
    	System.out.println("*" + test.maxHappyGroups(batchSize1, groups1));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize2, groups2));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize3, groups3));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize4, groups4));
    	
    	System.out.println("*" + test.maxHappyGroups(batchSize5, groups5));
    	***/
    	
    	// System.out.println("*" + test.maxHappyGroups(batchSize6, groups6));
    }
}
